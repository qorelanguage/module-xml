#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# make sure we have the right version of qore
%requires qore >= 1.12

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions

%requires QUnit

%requires Util
%requires xml
%requires SaxDataProvider

%exec-class InputStreamSaxIteratorTest

class TestInputStream inherits InputStream {
    private {
        list<auto> data;
    }

    constructor(list<auto> data) {
        self.data = data;
    }

    *binary read(int limit) {
        if (data.empty()) {
            return NOTHING;
        }
        any a = shift data;
        if (a.typeCode() == NT_STRING) {
            a = binary(a);
        }
        if (a.typeCode() != NT_BINARY) {
            throw a;
        }
        if (a.size() < limit) {
            return a;
        }
        unshift data, a.substr(limit);
        return a.substr(0, limit);
    }

    int peek() {
        if (!data)
            return -1;
        switch (data[0].typeCode()) {
            case NT_STRING: return ord(data[0][0]);
            case NT_BINARY: return data[0][0];
        }
        throw data[0];
    }
}

class InputStreamSaxIteratorTest inherits QUnit::Test {
    constructor() : QUnit::Test("InputStreamSaxIteratorTest", "1.0") {
        addTestCase("data provider", \dataProviderTest());
        addTestCase("success", \success());
        addTestCase("failInHeader", \failInHeader());
        addTestCase("failInNext", \failInNext());
        addTestCase("failInGetValue", \failInGetValue());
        set_return_value(main());
    }

    dataProviderTest() {
        SaxDataProvider prov({
            "stream": new StringInputStream("<r><x>a0</x><x>a1</x></r>"),
            "element_name": "x",
        });
        assertEq(({"data": "a0"}, {"data": "a1"}), (map $1,prov.searchRecords()));

        prov = new SaxDataProvider({
            "stream": new StringInputStream("<r><x>a0</x><x>a1</x></r>"),
            "element_name": "x",
        });
        assertEq(({"data": "a0"},), (map $1,prov.searchRecords(<DataProviderExpression>{
            "exp": DP_SEARCH_OP_EQ,
            "args": (
                <DataProviderFieldReference>{"field": "data"},
                "a0",
            ),
        })));
    }

    success() {
        InputStreamSaxIterator it(new StringInputStream("<r><x /><x>a</x></r>"), "x");
        assertTrue(it.next());
        assertEq(NOTHING, it.getValue());
        assertTrue(it.next());
        assertEq("a", it.getValue());
        assertFalse(it.next());
    }

    failInHeader() {
        TestInputStream is(("<r>", 1));
        InputStreamSaxIterator it(is, "x");
        assertThrows("1", \it.next());
    }

    failInNext() {
        TestInputStream is(("<r>", "<x>a", "</x><y>", 2));
        InputStreamSaxIterator it(is, "x");
        assertTrue(it.next());
        assertEq("a", it.getValue());
        assertThrows("2", \it.next());
    }

    failInGetValue() {
        TestInputStream is(("<r>", "<x>a", "</x><x>", "b", 3));
        InputStreamSaxIterator it(is, "x");
        assertTrue(it.next());
        assertEq("a", it.getValue());
        assertTrue(it.next());
        assertThrows("3", \it.getValue());
    }
}
