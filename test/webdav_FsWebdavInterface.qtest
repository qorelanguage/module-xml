#!/usr/bin/env qore

%new-style
%enable-all-warnings

%requires HttpServer
%requires ../qlib/WebDavHandler
%requires QUnit
%requires FsUtil
%requires Logger
%requires xml

%exec-class Main

# minimal HTTP server for this test suite
class Server inherits HttpServer {
    private {
        int port;
    }

    constructor(hash<HttpServerOptionInfo> http_opts, WebDavHandler::AbstractWebDavHandler handler) : HttpServer(http_opts) {
        setHandler("webdavhandler", "/", NOTHING, handler);
        setDefaultHandler("webdavhandler", handler);

        map addHttpMethod($1), handler.getHttpMethods();

        port = addListener(<HttpListenerOptionInfo>{"service": 0}).port;
    }

    int getPort() {
        return port;
    }

} # class Server

class Client inherits HTTPClient {
    constructor(string url)
            : HTTPClient({
                "url": url,
                "additional_methods": WebDavHandler::AbstractWebDavHandler::RequestMethods,
            }) {
    }
}

class Main inherits QUnit::Test {
    constructor() : QUnit::Test("webdavhandler", "1.0") {
        addTestCase("FS webdavhandler test", \test());

        set_return_value(main());
    }

    # test presence of extended HTTP methods in the server
    private test() {
        TmpDir tmp();
        WebDavHandler::FsWebDavHandler handler(tmp.path);

        Logger logger("test", LoggerLevel::getLevelInfo());
        if (m_options.verbose > 2) {
            logger.addAppender(new TestAppender());
        }
        hash<HttpServerOptionInfo> http_opts = <HttpServerOptionInfo>{
            "logger": logger,
            "debug": True,
        };

        Server srv(http_opts, handler);
        if (m_options.verbose > 2) {
            map srv.setListenerLogOptionsID($1, -1), keys srv.getListeners();
        }

        on_exit {
            srv.stop();
        }

        date start = now();

        TmpFile tmp_file(NOTHING, ".txt", tmp.path);
        tmp_file.file.printf("test");
        tmp_file.file.close();

        Client wd("http://localhost:" + srv.getPort());

        hash<auto> info;
        on_error printf("info: %N\n", info);

        hash<auto> req = {
            "DAV:propfind": {
                "^attributes^": {
                    "xmlns:DAV": "DAV:",
                },
                "DAV:prop": {
                    "DAV:creationdate": NOTHING,
                    "DAV:getlastmodified": NOTHING,
                    "DAV:getcontentlength": NOTHING,
                },
            },
        };

        string req_xml = make_xml(req);
        string xml;
        hash<auto> wd_data;
        date creation_date;
        date last_modified_date;
        hash<auto> props;
        # GMT time zone
        TimeZone gmt(0);
        {
            on_error printf("REQUEST XML: %s\n", req_xml);
            xml = wd.send(req_xml, "PROPFIND", basename(tmp_file.path), NOTHING, NOTHING, \info).body;
            wd_data = parse_xml(xml);
            on_error
                printf("response data: %N\n", wd_data);

            props = wd_data."DAV:multistatus"."DAV:response"."DAV:propstat"."DAV:prop";
            creation_date = date(props."DAV:creationdate");
            assertGe(start, creation_date);
            last_modified_date = gmt.date(props."DAV:getlastmodified"[5..], "DD Mon YYYY HH:mm:SS");
            assertGe(start, last_modified_date);
            assertEq(4, props."DAV:getcontentlength".toInt());
        }

        req = {
            "DAV:propfind": {
                "^attributes^": {
                    "xmlns:DAV": "DAV:",
                },
                "DAV:allprop": NOTHING,
            },
        };

        req_xml = make_xml(req);
        xml = wd.send(req_xml, "PROPFIND", basename(tmp_file.path), NOTHING, NOTHING, \info).body;
        #printf("response XML: %s\n", xml);
        wd_data = parse_xml(xml);
        #printf("response data: %N\n", wd_data);

        props = wd_data."DAV:multistatus"."DAV:response"."DAV:propstat"."DAV:prop";
        creation_date = date(props."DAV:creationdate");
        assertGe(start, creation_date);
        last_modified_date = gmt.date(props."DAV:getlastmodified"[5..], "DD Mon YYYY HH:mm:SS");
        assertGe(start, last_modified_date);
        assertEq(4, props."DAV:getcontentlength".toInt());

        xml = wd.send(NOTHING, "PROPFIND", basename(tmp_file.path), NOTHING, NOTHING, \info).body;
        #printf("response XML: %s\n", xml);
        wd_data = parse_xml(xml);
        #printf("response data: %N\n", wd_data);

        props = wd_data."DAV:multistatus"."DAV:response"."DAV:propstat"."DAV:prop";
        creation_date = date(props."DAV:creationdate");
        assertGe(start, creation_date);
        last_modified_date = gmt.date(props."DAV:getlastmodified"[5..], "DD Mon YYYY HH:mm:SS");
        assertGe(start, last_modified_date);
        assertEq(4, props."DAV:getcontentlength".toInt());

        xml = wd.send(NOTHING, "PROPFIND", "/", NOTHING, NOTHING, \info).body;
        #printf("response XML: %s\n", xml);
        wd_data = parse_xml(xml);

        #printf("response data: %N\n", wd_data);

        props = wd_data."DAV:multistatus"."DAV:response"[0]."DAV:propstat"."DAV:prop";
        creation_date = date(props."DAV:creationdate");
        assertGe(start, creation_date);
        last_modified_date = gmt.date(props."DAV:getlastmodified"[5..], "DD Mon YYYY HH:mm:SS");
        assertGe(start, last_modified_date);
        assertEq(NOTHING, props."DAV:getcontentlength");

        props = wd_data."DAV:multistatus"."DAV:response"[1]."DAV:propstat"."DAV:prop";
        creation_date = date(props."DAV:creationdate");
        assertGe(start, creation_date);
        last_modified_date = gmt.date(props."DAV:getlastmodified"[5..], "DD Mon YYYY HH:mm:SS");
        assertGe(start, last_modified_date);
        assertEq(4, props."DAV:getcontentlength".toInt());

        # check our initial file
        hash<auto> resp;
        {
            on_error printf("resp: %N\n", resp);
            resp = wd.send(NOTHING, "GET", basename(tmp_file.path), NOTHING, NOTHING, \info);
            assertEq("chunked", resp."transfer-encoding");
            assertEq("test", resp.body);
        }

        # push a file to the server
        string filename = get_random_string() + ".txt";
        string content = get_random_string();
        resp = wd.send(content, "POST", filename, NOTHING, NOTHING, \info);
        assertEq(201, resp.status_code);

        # retrieve the file we just pushed
        {
            on_error printf("resp: %N\n", resp);
            resp = wd.send(NOTHING, "GET", filename, NOTHING, NOTHING, \info);
            assertEq("chunked", resp."transfer-encoding");
            assertEq(content, resp.body);
        }

        # stream a new file to the server
        filename = get_random_string() + ".txt";
        content = get_random_string();

        StringInputStream is(content);
        code send = auto sub () {
            return is.read(4096);
        };
        {
            wd.sendHTTPMessageWithCallback(send, "POST", filename, "1.1", {"Transfer-Encoding": "chunked"}, \info);
            resp = wd.readHTTPHeader(5s);
            on_error printf("resp: %N\n", resp);
            if (resp."content-length") {
                resp.body = wd.recv(resp."content-length", 5s);
            } else if (resp."transfer-encoding" == "chunked") {
                resp += wd.readHTTPChunkedBody(5s);
            }
        }
        assertEq(201, resp.status_code);

        # retrieve the file we just pushed
        resp = wd.send(NOTHING, "GET", filename, NOTHING, NOTHING, \info);
        assertEq("chunked", resp."transfer-encoding");
        assertEq(content, resp.body);
    }
} # class Main

class TestAppender inherits LoggerAppenderWithLayout {
    constructor() : LoggerAppenderWithLayout("test", new LoggerLayoutPattern("%d T%t [%p]: %m%n")) {
        open();
    }

    processEventImpl(int type, auto params) {
        switch (type) {
            case EVENT_LOG:
                print(params);
                break;
        }
    }
}
