#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# make sure we have the right version of qore
%requires qore >= 0.8.12

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

# test deprecated functions as well
%disable-warning deprecated

%requires QUnit

%requires Util
%requires xml

%exec-class XmlTest

class XmlTest inherits QUnit::Test {
    public {
        const Xsd = '<?xml version="1.0" encoding="utf-8"?>
<xsd:schema targetNamespace="http://qoretechnologies.com/test/namespace" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:element name="TestElement">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="xsd:string"/>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>
</xsd:schema>
';

        const Hash = (
            "test": 1,
            "gee": "philly",
            "marguile": 1.0392,
            "list": (1, 2, 3, ("four": 4), 5),
            "hash": ("howdy": 123, "partner": 456),
            "list^1": "test",
            "bool": True,
            "time": now(),
            "bool^1": False,
            #"emptyhash": {},
            #"emptylist": (),
            "key": "this & that",
            );

        const Str = "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<file>
  <record id=\"1\"><name>test1</name></record>
  <record id=\"2\"><name>test2</name></record>
</file>
";

        const Rec = (
            "^attributes^": ("id": "1"),
            "name": "test1",
            );
    }

    constructor() : QUnit::Test("XmlTest", "1.0") {
        addTestCase("XmlTestCase", \xmlTestCase());
        addTestCase("DeprecatedXmlTestCase", \deprecatedXmlTestCase());
        addTestCase("FileSaxIteratorTestCase", \fileSaxIteratorTestCase());
        addTestCase("XmlCommentTestCase", \xmlCommentTestCase());
        addTestCase("get_xml_valueTestCase", \getXmlValueTestCase());
        set_return_value(main());
    }

    xmlTestCase() {
        hash o = Hash;
        hash mo = ("o": o);
        string str = make_xml("o", o);
        assertEq(True, mo.o == parse_xml(str, XPF_PRESERVE_ORDER).o, "first parse_xml()");
        str = make_xml("o", o, XGF_ADD_FORMATTING);
        assertEq(True, mo == parse_xml(str, XPF_PRESERVE_ORDER), "second parse_xml()");

        list params = (1, True, "string", NOTHING, o + ("emptylist": (), "emptyhash": hash()));
        str = make_xmlrpc_call("test.method", params, XGF_ADD_FORMATTING);
        hash result = ( "methodName" : "test.method", "params" : params );
        assertEq(result, parse_xmlrpc_call(str), "make_xmlrpc_call() and parse_xmlrpc_call() 1");
        str = make_xmlrpc_call("test.method", params);
        assertEq(result, parse_xmlrpc_call(str), "make_xmlrpc_call() and parse_xmlrpc_call() 2");
        str = make_xmlrpc_call("test.method", (True, o));
        result = ( "methodName" : "test.method","params" : (True, o) );
        assertEq(result, parse_xmlrpc_call(str), "make_xmlrpc_call() and parse_xmlrpc_call() 3");
        str = make_xmlrpc_call("test.method", (True, o), XGF_ADD_FORMATTING);
        assertEq(result, parse_xmlrpc_call(str), "make_xmlrpc_call() and parse_xmlrpc_call() 4");

        str = make_xmlrpc_response(o);
        assertEq(("params": o), parse_xmlrpc_response(str), "make_xmlrpc_response() and parse_xmlrpc_response() 1");
        str = make_xmlrpc_response(o, XGF_ADD_FORMATTING);
        assertEq(("params": o), parse_xmlrpc_response(str), "make_xmlrpc_response() and parse_xmlrpc_response() 2");
        str = make_xmlrpc_fault(100, "error");
        hash fr = ( "fault" : ( "faultCode" : 100, "faultString" : "error" ) );
        assertEq(fr, parse_xmlrpc_response(str), "make_xmlrpc_fault() and parse_xmlrpc_response() 1");
        str = make_xmlrpc_fault(100, "error", XGF_ADD_FORMATTING);
        assertEq(fr, parse_xmlrpc_response(str), "make_xmlrpc_fault() and parse_xmlrpc_response() 2");
        o = ( "xml" : (o + ( "^cdata^" : "this string contains special characters &<> etc" )) );
        assertEq(True, o == parse_xml(make_xml(o), XPF_PRESERVE_ORDER), "xml serialization with cdata");

        if (Option::HAVE_PARSEXMLWITHSCHEMA) {
            o = ( "ns:TestElement" : ( "^attributes^" : ( "xmlns:ns" : "http://qoretechnologies.com/test/namespace" ), "^value^" : "testing" ) );

            assertEq(o, parse_xml_with_schema(make_xml(o), Xsd), "parse_xml_with_schema()");
        }

        str = make_xml(mo);
        XmlDoc xd(str);
        assertEq(True, xd.toQore() == mo, "XmlDoc::constructor(<string>), XmlDoc::toQore()");
        assertEq(True, parse_xml(xd.toString(), XPF_PRESERVE_ORDER) == mo, "XmlDoc::toString()");
        XmlNode n = xd.evalXPath("//list[2]")[0];
        assertEq("2", n.getContent(), "XmlDoc::evalXPath()");
        assertEq("XML_ELEMENT_NODE", n.getElementTypeName(), "XmlNode::getElementTypeName()");
        n = xd.getRootElement().firstElementChild();
        assertEq("test", n.getName(), "XmlDoc::geRootElement(), XmlNode::firstElementChild(), XmlNode::getName()");
        n = xd.getRootElement().lastElementChild();
        assertEq("key", n.getName(), "XmlNode::lastElementChild()");
        assertEq("bool", n.previousElementSibling().getName(), "XmlNode::previousElementSibling()");
        assertEq(14, xd.getRootElement().childElementCount(), "XmlNode::childElementCount()");

        xd = new XmlDoc(mo);
        assertEq(True, xd.toQore() == mo, "XmlDoc::constructor(<hash>), XmlDoc::toQore()");

        XmlReader xr = new XmlReader(xd);
        # move to first element
        xr.read();
        assertEq(Xml::XML_NODE_TYPE_ELEMENT, xr.nodeType(), "XmlReader::read(), XmlReader::Type()");
        assertEq(True, xr.toQore() == mo.o, "XmlReader::toQoreData()");

        # #1326: module-xml: make_xml() is too strict for tag names, resulting in MAKE-XML-ERROR: tag: "_some_tag" is not a valid XML tag element name if tag starts with underscore
        hash underscore = ( "foo" : ("_underscore_test" : 1, ) );
        string underscoreResult = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><foo><_underscore_test>1</_underscore_test></foo>";
        assertEq(underscoreResult, make_xml(underscore), "_underscore_test");
    }

    deprecatedXmlTestCase() {
        hash o = Hash;
        hash mo = ("o": o);
        string str = makeXMLString("o", o);
        assertEq(True, mo.o == parseXML(str).o, "first parseXML()");
        str = makeFormattedXMLString("o", o);
        assertEq(True, mo == parseXML(str), "second parseXML()");
        list params = (1, True, "string", NOTHING, o + ("emptylist": (), "emptyhash": hash()));
        str = makeFormattedXMLRPCCallStringArgs("test.method", params);
        hash result = ( "methodName" : "test.method", "params" : params );
        assertEq(result, parseXMLRPCCall(str), "makeXMLRPCCallStringArgs() and parseXMLRPCCall()");
        str = makeFormattedXMLRPCCallStringArgs("test.method", params);
        assertEq(result, parseXMLRPCCall(str), "makeFormattedXMLRPCCallStringArgs() and parseXMLRPCCall()");
        str = makeXMLRPCCallString("test.method", True, o);
        result = ( "methodName" : "test.method","params" : (True, o) );
        assertEq(result, parseXMLRPCCall(str), "makeXMLRPCCallString() and parseXMLRPCCall()");
        str = makeFormattedXMLRPCCallString("test.method", True, o);
        assertEq(result, parseXMLRPCCall(str), "makeFormattedXMLRPCCallString() and parseXMLRPCCall()");

        str = makeXMLRPCResponseString(o);
        assertEq(("params": o), parseXMLRPCResponse(str), "first makeXMLRPCResponse() and parseXMLRPCResponse()");
        str = makeFormattedXMLRPCResponseString(o);
        assertEq(("params": o), parseXMLRPCResponse(str), "first makeFormattedXMLRPCResponse() and parseXMLRPCResponse()");
        str = makeXMLRPCFaultResponseString(100, "error");
        hash fr = ( "fault" : ( "faultCode" : 100, "faultString" : "error" ) );
        assertEq(fr, parseXMLRPCResponse(str), "second makeXMLRPCResponse() and parseXMLRPCResponse()");
        str = makeFormattedXMLRPCFaultResponseString(100, "error");
        assertEq(fr, parseXMLRPCResponse(str), "second makeXMLRPCResponse() and parseXMLRPCResponse()");
        o = ( "xml" : (o + ( "^cdata^" : "this string contains special characters &<> etc" )) );
        assertEq(True, o == parseXML(makeXMLString(o)), "xml serialization with cdata");

        if (Option::HAVE_PARSEXMLWITHSCHEMA) {
            o = ( "ns:TestElement" : ( "^attributes^" : ( "xmlns:ns" : "http://qoretechnologies.com/test/namespace" ), "^value^" : "testing" ) );

            assertEq(o, parseXMLWithSchema(makeXMLString(o), Xsd), "parseXMLWithSchema()");
        }
    }

    fileSaxIteratorTestCase() {
        string fn = sprintf("%s%s%s.xml", tmp_location(), DirSep, get_random_string());
        File f();
        f.open(fn, O_CREAT | O_WRONLY | O_TRUNC);
        f.write(Str);
        on_exit
            unlink(fn);
        FileSaxIterator i(fn, "record");
        assertEq(True, i.next());
        assertEq(Rec, i.getValue());
    }

    xmlCommentTestCase() {
        string xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<file>
  <!--file-->
  <record id=\"1\">
    <!--rec1-->
    <name><!--test1 comment-->test1</name>
    <!--rec1 c2-->
  </record>
  <record id=\"2\">
    <!--rec2-->
    <name>test2</name>
  </record>
  <!--file 2-->
</file>";

        hash rec = (
            "file": (
                "^comment^": "file",
                "record": (

                    (
                        "^attributes^": ("id": "1"),
                        "^comment^": "rec1",
                        "name": (
                            "^comment^": "test1 comment",
                            "^value^": "test1",
                        ),
                        "^comment1^": "rec1 c2",
                    ),
                    (
                        "^attributes^": ("id": "2"),
                        "^comment^": "rec2",
                        "name": "test2",
                    )
                ),
                "^comment1^": "file 2",
            )
        );

        assertEq(xml, make_xml(rec, XGF_ADD_FORMATTING), "make_xml()");
        assertEq(rec, parse_xml(xml, XPF_PRESERVE_ORDER | XPF_ADD_COMMENTS), "parse_xml()");
    }

    getXmlValueTestCase() {
        hash rec = (
            "normal": "normal elem",
            "nothing": NOTHING,
            "listOfString": ( "list item1", "list item2"),
            "withAtriibutes": (
                "^attributes^": ("a": "a"),
                "^value^": "value with attr",
            ),
            "withAttributesNothing": (
                "^attributes^": ("a": "a"),
            ),
            "integer": 999,
            "bool": True,
            "multiValue": (
                "^value^": "val1",
                "^comment^": "aaa",
                "^value2^": "val2",
            ),
            "integerValue": ("^value^": 888),
            "listValue": ("^value^": (1,2)),
            "hashValue": ("^value^": ("a":"a")),
        );
        assertEq(rec.normal, get_xml_value(rec.normal), "get_xml_value normal");  # coredump
        assertEq(NOTHING, get_xml_value(rec.nothing), "get_xml_value nothing");
        assertEq(NOTHING, get_xml_value(rec.listOfStrings), "get_xml_value list");
        assertEq(rec.listOfStrings[0], get_xml_value(rec.listOfStrings[0]), "get_xml_value list[0]");
        assertEq(rec.withAttributes."^value^", get_xml_value(rec.withAttributes), "get_xml_value withAttributes");
        assertEq(NOTHING, get_xml_value(rec.withAttributesNothing), "get_xml_value withAttributesNothing");
        assertEq(string(rec.integer), get_xml_value(rec.integer), "get_xml_value integer");
        assertEq("True", get_xml_value(rec.bool), "get_xml_value bool");
        assertEq(rec.multiValue."^value^", get_xml_value(rec.multiValue), "get_xml_value multivalue");  # core dump
        assertEq(string(rec.integerValue."^value^"), get_xml_value(rec.integerValue), "get_xml_value integervalue");
        assertEq(NOTHING, get_xml_value(rec.listValue), "get_xml_value listvalue");
        assertEq(NOTHING, get_xml_value(rec.hashValue), "get_xml_value hashvalue");
    }
}
