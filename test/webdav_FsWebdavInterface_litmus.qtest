#!/usr/bin/env qore

%new-style
%enable-all-warnings

%requires FsUtil
%requires HttpServer
%requires ../qlib/WebDavHandler
%requires QUnit
%requires Logger

%requires process

%exec-class Main

class WebDavTestAppender inherits LoggerAppenderWithLayout {
    constructor() : LoggerAppenderWithLayout("WebDAV", new LoggerLayoutPattern("%d T%t [%p]: %m%n")) {
        open();
    }

    processEventImpl(int type, auto params) {
        switch (type) {
            case EVENT_LOG:
                print(params);
                break;
        }
    }
}

# minimal HTTP server for this test suite
class Server inherits HttpServer {
    private {
        int verbose;

        static int port;
    }

    constructor(WebDavHandler::AbstractWebDavHandler handler, int verbose = 0) : HttpServer(Server::getOptions(verbose)) {
        self.verbose = verbose;
        setHandler("webdavhandler", "/", NOTHING, handler);
        setDefaultHandler("webdavhandler", handler);

        map addHttpMethod($1), handler.getHttpMethods();

        port = addListener(<HttpListenerOptionInfo>{"service": 0}).port;
    }

    # logger for http server
    log(string str) {
        if (verbose > 2) {
            printf("%N: %s\n", now_us(), vsprintf(str, argv));
        }
    }

    static int getPort() {
        return port;
    }

    static hash<HttpServerOptionInfo> getOptions(int verbose) {
        Logger logger("WebDAV", LoggerLevel::getLevelInfo());
        if (verbose > 2) {
            logger.addAppender(new WebDavTestAppender());
        }
        return <HttpServerOptionInfo>{
            "logger": logger,
            "debug": True,
        };
    }
} # class Server

class Litmus {
    private {
        bool m_have_litmus = False;
        string m_stdout;
        int m_rc = 0;
    }

    constructor(string url, int verbose = 0) {
        int rc;
        backquote("litmus -h", \rc);
        # rc 1 = exit after help
        if (rc == 1) {
            m_have_litmus = True;
        }

        if (!m_have_litmus) {
            printf("INFO: No 'litmus' binary found. Litmus test skipped\n");
            return;
        }

        printf("using URL %y\n", url);

        #m_stdout = backquote("litmus \"" + url + "\"", \m_rc);

        Process proc("litmus", url);
        code checkOutput = sub () {
            *string str = proc.readStdout(16384, 0);
            if (exists str) {
                printf("%s", str);
            }
            str = proc.readStderr(16384, 0);
            if (exists str) {
                printf("%s", str);
            }
        };
        if (verbose) {
            while (proc.running()) {
                checkOutput();
                usleep(250ms);
            }
            checkOutput();
        } else {
            proc.wait();
        }
        m_rc = proc.exitCode();
    }

    *string out() {
        return m_stdout;
    }

    int result() {
        return m_rc;
    }
}

class Main inherits QUnit::Test {
    constructor() : QUnit::Test("webdavhandler", "1.0") {
        addTestCase("litmus test", \testLitmus());

        set_return_value(main());
    }

    private testLitmus() {
        TmpDir tmp("litmus-");
        if (m_options.verbose) {
            printf("Using tmp path: %s\n", tmp.path);
        }

        WebDavHandler::FsWebDavHandler handler(tmp.path);
        Server srv(handler, m_options.verbose);
        on_exit {
            srv.stop();
        }

        Litmus litmus("http://localhost:" + Server::getPort(), m_options.verbose);

        assertEq(0, litmus.result(), "litmus result value");
    }
} # class Main
