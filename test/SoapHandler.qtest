#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# make sure we have the right version of qore
%requires qore >= 0.8.13

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

# test deprecated functions as well
%disable-warning deprecated

%requires Util
%requires QUnit
%requires HttpServer
%requires ../qlib/WSDL.qm
%requires ../qlib/SoapHandler.qm
%requires ../qlib/SoapClient.qm

%requires xml
%requires HttpServerUtil >= 0.3.11

# use a random port
const DefaultPort = 0;

%exec-class SoapHandlerTest

const ResponseBody = ("result": 99.9);

class SimpleSoapHandler inherits SoapHandler {
    public {
        list msglogs;
    }
    constructor(HttpServer::AbstractAuthenticator auth, *code n_getLogMessage, bool dbg = False): SoapHandler(auth, n_getLogMessage, dbg) {}

    nothing msglog(hash cx, hash msg) {
        push msglogs, msg;
    }
}

class TestSoapServer inherits HttpServer {
    public {
        SimpleSoapHandler soap;
        string opname;
        any mdata;
        any rdata;
    }

    private {
        int verbose;
    }

    constructor(WebService ws1, WebService ws2, int port, int verbose = 0) : HttpServer(\self.log(), \self.errlog(), verbose > 2) {
        self.verbose = verbose;

        # setup SOAP handler
        soap = new SimpleSoapHandler(new PermissiveAuthenticator(), NOTHING, verbose > 2);
        setHandler("soap_prefix", "SOAP", MimeTypeSoapXml, soap, "soapaction", False);
        setDefaultHandler("soap", soap);

        # setup operation handler
        soap.addMethod(ws1, ws1.getOperation("getCompanyInfo"), \getCompanyInfo(), NOTHING, NOTHING, NOTHING, "CompanyInfoService");
        soap.addMethod(ws1, ws1.getOperation("getCompanyInfo"), \getCompanyInfo2(), NOTHING, NOTHING, NOTHING, "CompanyInfoService", NOTHING, "company2");
        soap.addMethod(ws2, ws2.getOperation("Send"), \Send(), NOTHING, NOTHING, NOTHING, "ExampleSendOrder");

        addListener(port);
    }

    hash getCompanyInfo(hash cx, hash h) {
        if (h.tickerSymbol == "ERR") {
            throw "getCompanyInfoFault", "a terrible error occurred", {"err": "err1", "desc": "desc1", "arg": 100};
        }

        return (
            "body" : ("result": 99.9),
            "docs" : sprintf("<head>testing</head><body>%s</body>", h.tickerSymbol),
            "logo" : <bead>,
        );
    }

    hash getCompanyInfo2(hash cx, hash h) {
        if (h.tickerSymbol == "ERR")
            throw "ERR", "ERR";

        return (
            "body" : ("result": 100.1),
            "docs" : sprintf("<head>testing</head><body>%s</body>", h.tickerSymbol),
            "logo" : <facebead>,
        );
    }

    hash Send(hash cx, hash h) {
        return (
            "OrderNumber": "16685422",
            "Timestamp": now_us(),
            "ReceiptAck": (
                "OriginalTXID": now_us().toString(),
                "RequestStatus": "Success",
            ),
            );
    }

    errlog(string fmt) {
        if (verbose > 2)
            vprintf(fmt + "\n", argv);
    }

    log(string fmt) {
        if (verbose > 2)
            vprintf(fmt + "\n", argv);
    }
}

class SoapHandlerTest inherits QUnit::Test {
    public {
        TestSoapServer server;
    }

    private {
        const WsdlUrl1 = "file://" + normalize_dir(get_script_dir()) + "/simple.wsdl";
        const WsdlUrl2 = "file://" + normalize_dir(get_script_dir()) + "/multi-soap.wsdl";

        #! command-line options
        const MyOpts = Opts + (
            "port": "p,port=i",
            #"verbose": "verbose=i",  # already in Opts
            "host": "host=s",
        );

        const OptionColumn = 25;

        const MultiReq = (
            "OrderNumber": "TEST-123",
            "DealerCode": "DEALER-1",
            "IsUpdate": False,
            "IsCancelled": False,
            "IsGiftWrapped": False,
            "ShipToStore": True,
            "GiftWrapped": False,
            "DeliveryType": "TEST",
            "EmailAddress": "test@test.com",
            "ContactNumber": "+420 777 279 144",
            "Name": (
                "FirstName": "Testie",
                "LastName": "O'Test",
            ),
            "DeliveryAddress": (
                "AddressLine1": "Kladska 5/1489",
                "AddressLine2": "120 00",
                "AddressLine3": "Prague",
                "AddressLine4": "",
                "County": "Prague",
                "Country": "Czech Republic",
            ),
            "InvoiceAddress": (
                "AddressLine1": "Kladska 5/1489",
                "AddressLine2": "120 00",
                "AddressLine3": "Prague",
                "AddressLine4": "",
                "County": "Prague",
                "Country": "Czech Republic",
            ),
            "OrderGrossPrice": 149.99n,
            "OrderDiscount": 0.00n,
            "OrderNetPrice": 130.00n,
            "OrderItem": (
                "Price": 130.00n,
                "FTC": True,
            ),
            );

        const MultiResp = (
            "OrderNumber": "16685422",
            "ReceiptAck": (
                "RequestStatus": "Success",
                "ErrorInfo": NOTHING,
            ),
            );

        string url1;
        string path1;
        string url2;
        string path2;
        string url3;
        int serverPort;
    }

    constructor() : QUnit::Test("SoapHandlerTest", "1.0", \ARGV, MyOpts) {
        WebService ws1(WSDLLib::getFileFromURL(WsdlUrl1));
        WebService ws2(WSDLLib::getFileFromURL(WsdlUrl2));

        # get target URLs
        path1 = parse_url(ws1.getService(ws1.listServices()[0].name).port.firstValue().address).path;
        path1 =~ s/^\///;
        path2 = parse_url(ws2.getService(ws2.listServices()[0].name).port.firstValue().address).path;
        path2 =~ s/^\///;

        # start SOAP server server
        server = new TestSoapServer(ws1, ws2, m_options.port ?? DefaultPort, m_options.verbose);
        on_exit server.stop();
        serverPort = server.getListenerInfo(0).port;
        # when dual IPv4/IPv6 stack then may resolve gethostname() with unsupposed IP address where server is not listening
        url1 = sprintf("http://%s:%d/%s", m_options.host ?? gethostname(), serverPort, path1);
        url2 = sprintf("http://%s:%d/%s", m_options.host ?? gethostname(), serverPort, path2);
        url3 = sprintf("http://%s:%d/company2", m_options.host ?? gethostname(), serverPort);

        # add test cases
        addTestCase("issue 2804", \issue2804());
        addTestCase("issue 2783", \issue2783());
        addTestCase("simpleTest", \simpleTest());
        addTestCase("multiTest", \multiTest());

        # execute tests
        set_return_value(main()); exit();
    }

    issue2804() {
        SoapClient sc({"wsdl": WsdlUrl1, "url": url1});
        # setup SOAP call with multipart response
        hash h.body.tickerSymbol = "ERR";
        # make SOAP call with multipart response
        hash<ExceptionInfo> ex;
        try {
            sc.call("getCompanyInfo", h);
        }
        catch (hash<ExceptionInfo> ex1) {
            ex = ex1;
        }
        #printf("%s\n", get_exception_string(ex));
        assertEq("SOAP-SERVER-FAULT-RESPONSE", ex.err);
        assertEq("err1", ex.arg.Detail."ns1:GetCompanyInfoFault"."ns1:err");
        assertEq("desc1", ex.arg.Detail."ns1:GetCompanyInfoFault"."ns1:desc");
    }

    issue2783() {
        SoapClient sc(("wsdl": WsdlUrl1, "url": url3));

        # setup SOAP call with multipart response
        hash h.body.tickerSymbol = "QORE";
        # make SOAP call with multipart response
        hash response = sc.call("getCompanyInfo", h);

        assertEq(100.1, response.body.result);
        assertEq(Type::String, response.docs.type());
        assertEq(Type::Binary, response.logo.type());

        string wsdl = sc.get("company2?wsdl");
        assertEq(Type::String, wsdl.type());
    }

    simpleTest() {
        SoapClient sc(("wsdl": WsdlUrl1, "url": url1));

        # setup SOAP call with multipart response
        hash h.body.tickerSymbol = "QORE";
        # make SOAP call with multipart response
        hash response = sc.call("getCompanyInfo", h);

        assertEq(99.9, response.body.result);
        assertEq(Type::String, response.docs.type());
        assertEq(Type::Binary, response.logo.type());

        string wsdl = sc.get(path1 + "?wsdl");
        assertEq(Type::String, wsdl.type());
    }

    multiTest() {
        SoapClient sc(("wsdl": WsdlUrl2, "url": url2));

        hash answer = sc.Send(("OrderRequests": ("OrderRequest": MultiReq), "swaBinary": NOTHING));
        assertEq(Type::String, (remove answer.ReceiptAck.OriginalTXID).type());
        assertEq(Type::String, (remove answer.Timestamp).type());
        assertEq(MultiResp, answer);
    }
}
