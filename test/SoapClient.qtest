#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# make sure we have the right version of qore
%requires qore >= 0.8.13

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

# test deprecated functions as well
%disable-warning deprecated

%requires QUnit
%requires HttpServer
%requires ../qlib/WSDL.qm
%requires ../qlib/SoapHandler.qm
%requires ../qlib/SoapClient.qm

%requires Util
%requires xml
%requires HttpServerUtil >= 0.3.11

const DefaultPort = 0;

%exec-class SoapClientTest

const ResponseBody = ("result": 99.9);

class TestSoapHandler inherits SoapHandler {
    public {
        list<hash<auto>> msglogs;
        *Queue queue;
    }

    constructor(HttpServer::AbstractAuthenticator auth, *code n_getLogMessage, bool dbg = False, *Queue queue)
        : SoapHandler(auth, n_getLogMessage, dbg) {
        self.queue = queue;
    }

    hash<HttpResponseInfo> handleRequest(HttpListenerInterface listener, Socket s, hash<auto> cx, hash<auto> hdr, *data body) {
        if (queue) {
            s.setEventQueue(queue, "server connection", True);
        }
        return SoapHandler::handleRequest(listener, s, cx, hdr, body);
    }

    nothing msglog(hash<auto> cx, hash<auto> msg) {
        push msglogs, msg;
    }
}

class TestSoapServer inherits HttpServer {
    public {
        TestSoapHandler soap;
        string opname;
        auto mdata;
        auto rdata;
    }

    private {
        int verbose;
    }

    constructor(WebService ws, int port, int verbose = 0, *Queue queue) : HttpServer(\self.log(), \self.errlog(), verbose > 2) {
        self.verbose = verbose;

        # setup SOAP handler
        soap = new TestSoapHandler(new PermissiveAuthenticator(), NOTHING, verbose > 2, queue);
        setHandler("soap_prefix", "SOAP", MimeTypeSoapXml, soap, "soapaction", False);
        setDefaultHandler("soap", soap);

        # setup operation handler
        soap.addMethod(ws, ws.getOperation("getInfo"), \getInfo(), NOTHING, NOTHING, NOTHING, "InfoService");

        # not yet supported
        soap.addMethod(ws, ws.getOperation("urlRepl"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b2");
        soap.addMethod(ws, ws.getOperation("urlEncoded1"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b2");
        soap.addMethod(ws, ws.getOperation("getMimeXml"), \generalOutputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b2");
        soap.addMethod(ws, ws.getOperation("getBinary"), \generalOutputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b2");

        soap.addMethod(ws, ws.getOperation("postForm"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");
        soap.addMethod(ws, ws.getOperation("postText"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");
        soap.addMethod(ws, ws.getOperation("postImg"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");
        soap.addMethod(ws, ws.getOperation("postImg2"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");
        soap.addMethod(ws, ws.getOperation("postImg3"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");
        soap.addMethod(ws, ws.getOperation("postData"), \generalInputOnly(), NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, NOTHING, "b3");

        addListener(port);
        if (queue) {
            listeners.firstValue().setEventQueue(queue, "server", True);
        }
    }

    hash getInfo(hash cx, hash h) {
        if (h.tickerSymbol == "ERR")
            throw "ERR", "ERR";
        return {
            "body": ResponseBody,
            "docs": h.tickerSymbol,
            "logo": binary(cx.http_header.soapaction),
        };
    }

    *hash generalInputOnly(hash cx, hash h) {
        opname = cx.operation.name;
        mdata = h;
    }

    *hash generalOutputOnly(hash cx) {  # no input params
        opname = cx.operation.name;
        return rdata;
    }

    errlog(string fmt) {
        if (verbose > 2)
            vprintf(fmt + "\n", argv);
    }

    log(string fmt) {
        if (verbose > 2)
            vprintf(fmt + "\n", argv);
    }
}

class TestSoapClient inherits SoapClient {
    public {
        list msglogs;
    }
    constructor(hash h): SoapClient(h) {}
    nothing msglog(hash msg) {
        push msglogs, msg;
    }
}

class SoapClientTest inherits QUnit::Test {
    public {
        TestSoapServer server;
        TestSoapClient sc;
    }

    private {
        const WsdlUrl = "file://" + normalize_dir(get_script_dir()) + "/test.wsdl";

        #! command-line options
        const MyOpts = Opts + (
            "port": "p,port=i",
            #"verbose": "verbose=i",  # already in Opts
            "host": "host=s",
            "events": "e,show-events",
        );

        string url;
        int serverPort;

        # event queue
        Queue queue();

        const OptionColumn = 25;
    }

    constructor() : QUnit::Test("SoapClientTest", "1.0", \ARGV, MyOpts) {
        WebService ws(WSDLLib::getFileFromURL(WsdlUrl));

        # start SOAP server server
        server = new TestSoapServer(ws, m_options.port ?? DefaultPort, m_options.verbose, m_options.events ? queue : NOTHING);
        on_exit server.stop();
        serverPort = server.getListenerInfo(0).port;
        # when dual IPv4/IPv6 stack then may resolve gethostname() with unsupposed IP address where server is not listening
        url = sprintf("http://user:pass@%s:%d", m_options.host ? m_options.host : gethostname(), serverPort);

        # add test cases
        addTestCase("issue 3336", \issue3336());
        addTestCase("SoapClientTest", \soapClientTest());
        addTestCase("HttpGetClientTest", \httpGetClientTest());
        addTestCase("HttpPostClientTest", \httpPostClientTest());
        addTestCase("SoapConnectionTest", \soapConnectionTest());

        if (m_options.events) {
            background eventThread();
        }
        on_exit if (m_options.events) queue.push();

        # execute tests
        set_return_value(main()); exit();
    }

    cleanMsgLog() {
        sc.msglogs = ();
        server.soap.msglogs = ();
    }

    issue3336() {
        sc = new TestSoapClient({"wsdl": WsdlUrl, "url": "http://localhost:1"});
        assertThrows("SOCKET-CONNECT-ERROR", \sc.callOperation(), ("getInfo", {"GetInfo": {"tickerSymbol": "ABC"}}));
    }

    soapClientTest() {
        #printf("url: %y\n", url);
        sc = new TestSoapClient(("wsdl": WsdlUrl, "port": "SoapPort", "url": url));

        if (m_options.events) {
            sc.setEventQueue(queue, "client", True);
        }

        cleanMsgLog();

        hash h = sc.callOperation("getInfo", ("GetInfo": ("tickerSymbol": "ABC")), ("soapaction": "", "http_header": {"Test": "X-Test"}));
        assertEq(99.9, h.body.result);
        assertEq("ABC", h.docs);
        assertEq(binary(), h.logo);
        assertEq("request", sc.msglogs[0].reason);
        assertEq(True, sc.msglogs[0].body =~ /GetInfo/);
        assertEq("response", sc.msglogs[1].reason);
        assertEq(True, sc.msglogs[1].body =~ /GetInfoResult/);
        assertEq(server.soap.msglogs[0].('reason', 'code', 'body'), sc.msglogs[0].('reason', 'code', 'body'));
        assertEq(server.soap.msglogs[1].('reason', 'code', 'body'), sc.msglogs[1].('reason', 'code', 'body'));
        assertEq("X-Test", server.soap.msglogs[0].header.test);
        assertEq("Basic dXNlcjpwYXNz", server.soap.msglogs[0].header.authorization);

        cleanMsgLog();

        h = sc.callOperation("getInfo", ("GetInfo": ("tickerSymbol": "QOR")), ("soapaction": "TestAction"));
        assertEq(99.9, h.body.result);
        assertEq("QOR", h.docs);
        assertEq(binary("TestAction"), h.logo);

        cleanMsgLog();

        assertThrows("SOAP-SERVER-FAULT-RESPONSE", \sc.callOperation(), ("getInfo", ("GetInfo": ("tickerSymbol": "ERR"))));
        assertEq("error", sc.msglogs[1].reason);
        assertEq(400, sc.msglogs[1].code);
        assertEq(True, sc.msglogs[1].body =~ /Fault/);
        assertEq("application/soap+xml,text/xml,application/xml", sc.msglogs[0]."accept");
        assertEq(server.soap.msglogs[0].('reason', 'code', 'body'), sc.msglogs[0].('reason', 'code', 'body'));
        assertEq(server.soap.msglogs[1].('reason', 'code', 'body'), sc.msglogs[1].('reason', 'code', 'body'));

        assertThrows("WSDL-OPERATION-ERROR", \sc.callOperation(), "xxx");

        WebService ws(WSDLLib::getWSDL(WsdlUrl));
        sc = new TestSoapClient(("wsdl": ws, "port": "SoapPort"));
        assertEq(True, sc instanceof SoapClient, "issue 1424");

        HTTPClient hc(("url": url));
        hash info;
        *string str = hc.get("/SOAP/InfoService?wsdl", NOTHING, \info);
        assertEq(True, str && str =~ /http:\/\/[^\/]*\/SOAP\/InfoService/, "issue 1631");
    }

    httpGetClientTest() {
        #printf("url: %y\n", url);
        sc = new TestSoapClient(("wsdl": WsdlUrl, "port": "HttpGetPort", "url": url));

        if (m_options.events) {
            sc.setEventQueue(queue, "GET client", True);
        }

        cleanMsgLog();
        *hash<auto> h;
        assertThrows("HTTP-CLIENT-RECEIVE-ERROR", \sc.callOperation(), ("urlRepl", ("country": "CZ", "city": "Prague 2", "zip": 12000)));
        assertEq("/get/CZ/12000-Prague%202", sc.msglogs[0].path);
        assertEq(sc.msglogs[0].method, "GET");

        try {
            cleanMsgLog();
            hash<auto> hi = ("country": "CZ", "city": "Prague_2", "zip": 12000);
            h = sc.callOperation("urlEncoded1", hi);
            assertEq(server.opname, "urlEncoded1");
            assertEq(server.mdata, hi);

            cleanMsgLog();
            server.rdata = ("STR": "AbCdEf");
            h = sc.callOperation("getMimeXml", ());
            assertEq(server.opname, "getMimeXml");
            assertEq(server.soap.msglogs[0].('reason', 'method'), sc.msglogs[0].('reason', 'method'));
            assertEq("text/xml;charset=UTF-8", sc.msglogs[1]."content-type");
            assertEq("text/xml", sc.msglogs[0]."accept");
            assertEq(server.rdata, h);

            cleanMsgLog();
            server.rdata = ("payload": ("^attributes^": ("^content-type^": "application/plain"), "^value^": "ADATA"));
            h = sc.callOperation("getBinary", ());
            assertEq(server.opname, "getBinary");
            assertEq("text/plain,text/html,image/*,application/*", sc.msglogs[0]."accept");
            assertEq(server.rdata.payload."^attributes^"."^content-type^", sc.msglogs[1]."content-type");
            server.rdata.payload."^value^" = binary(server.rdata.payload."^value^");
            assertEq(server.rdata, h);

            cleanMsgLog();
            server.rdata = ("payload": "xxx");
            assertThrows("SOAP-DESERIALIZATION-ERROR", \sc.callOperation(), ("getBinary", ()));
        } catch (hash<ExceptionInfo> ex) {
            printf("Exception: %s\n", get_exception_string(ex));
            rethrow;
        }
    }

    httpPostClientTest() {
        #printf("url: %y\n", url);
        sc = new TestSoapClient(("wsdl": WsdlUrl, "port": "HttpPostPort", "url": url));

        if (m_options.events) {
            sc.setEventQueue(queue, "POST client", True);
        }

        *hash<auto> h;
        try {
            cleanMsgLog();
            hash hi = ("country": "CZ", "city": "Prague_2", "zip": 12000);
            h = sc.callOperation("postForm", hi);
            assertEq(server.opname, "postForm");
            assertEq(hi, server.mdata);
            assertEq(sc.msglogs[0].method, "POST");

            cleanMsgLog();
            hi = ("info": "very important text");
            h = sc.callOperation("postText", hi);
            assertEq(server.opname, "postText");
            assertEq("text/plain;charset=ISO-8859-1", sc.msglogs[0].header."Content-Type");
            assertEq(("info": ("^attributes^": ("^content-type^": "text/plain"), "^value^": hi.info)), server.mdata);

            cleanMsgLog();
            hi = ("img": "nice image");

            cleanMsgLog();
            hi = ("img": ("^attributes^": ("^content-type^": "image/png"), "^value^": <1234567890ABCDEF> ));
            h = sc.callOperation("postImg", hi);
            assertEq(server.opname, "postImg");
            assertEq(hi.img."^attributes^"."^content-type^", sc.msglogs[0].header."Content-Type");
            assertEq(hi, server.mdata);

            hi.img."^attributes^"."^content-type^" = "image/jpeg";
            assertThrows("SOAP-MESSAGE-ERROR", \sc.callOperation(), ("postImg", hi));

            cleanMsgLog();
            h = sc.callOperation("postImg2", hi);
            assertEq(server.opname, "postImg2");
            assertEq(hi.img."^attributes^"."^content-type^", sc.msglogs[0].header."Content-Type");
            assertEq(hi, server.mdata);

            cleanMsgLog();
            h = sc.callOperation("postImg3", hi);
            assertEq(server.opname, "postImg3");
            assertEq(hi.img."^attributes^"."^content-type^", sc.msglogs[0].header."Content-Type");
            assertEq(hi, server.mdata);

            cleanMsgLog();
            hi = ("payload": ("^attributes^": ("^content-type^": "application/qore"), "^value^": <0ABCDEF01234567890>));
            h = sc.callOperation("postData", hi);
            assertEq(server.opname, "postData");
            assertEq(hi.payload."^attributes^"."^content-type^", sc.msglogs[0].header."Content-Type");
            assertEq(hi, server.mdata);
        } catch (hash<ExceptionInfo> ex) {
            printf("Exception: %s\n", get_exception_string(ex));
            rethrow;
        }
    }

    soapConnectionTest() {
        string conn_url = WsdlUrl;
        conn_url =~ s/^file/soap/;

        if (m_options.verbose > 2)
            printf("conn_url: %y\n", conn_url);

        SoapConnection conn("test", "test", conn_url, False, ("target_url": url, "port": "SoapPort"), parse_url(conn_url));
        SoapClient sc2 = conn.get();
        hash<auto> h = sc2.callOperation("getInfo", ("GetInfo": ("tickerSymbol": "ABC")), ("soapaction": ""));
        assertEq(99.9, h.body.result);
        assertEq("ABC", h.docs);
        assertEq(binary(), h.logo);

        # issue #3696: test connection serialization
        SoapConnection conn2 = Serializable::deserialize(conn.serialize());
        assertEq(conn.url, conn2.url);
    }

    private eventThread() {
        while (True) {
            # get a message from the event queue; a hash is returned with at
            # least the following keys: "event" with the event code, and
            # "source" with the event source identifier

            *hash<auto> e = queue.get();

            # stop listening when empty event posted to queue in constructor()
            if (!e)
                return;

            if (e.data.typeCode() == NT_BINARY) {
                string str = e.data.toString();
                delete e.data;
                for (int i = 0, int end = str.length(); i < end; ++i) {
                    string char = str[i];
                    int uc = char.getUnicode();
                    if (uc < 32 || uc >= 127) {
                        e.data += sprintf("<%x>", uc);
                    } else {
                        e.data += char;
                    }
                }
            }

            e.id = sprintf("%x", e.id);

            printf("%s %s: %y\n", EVENT_SOURCE_MAP.(e.source), EVENT_MAP.(e.event), e - ("event", "source"));
            flush(); # flush output
        }
    }
}
