/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SaxIterator.qpp defines the SaxIterator class */
/*
    QC_SaxIterator.qpp

    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "qore-xml-module.h"

#include "QC_SaxIterator.h"

//! The SaxIterator class provides a SAX iterator for XML data based on <a href="http://xmlsoft.org">libxml2</a>
/**
 */
qclass SaxIterator [arg=QoreSaxIterator* i; ns=Qore::Xml; vparent=AbstractIterator];

//! creates a new SaxIterator object from the XML string and element name passed
/** @param xml an XML string to iterate
    @param element_name the name of the element to iterate through
    @param opts the following options are supported:
    - \c xml_parse_options: (int bitfield) XML parsing flags; see @ref xml_parsing_constants for more information
    - \c xml_input_io: (AbstractXmlIoInputCallback) an AbstractXmlIoInputCallback object to resolve external XSD schema references
    - \c xsd: (string) an XSD string for schema validation while parsing

    @par Example:
    @code
SaxIterator i(xml, "DetailRecord");
map printf("record %d: %y\n", $#, $1), i;
    @endcode

    @throw XMLDOC-CONSTRUCTOR-ERROR error parsing XML string

    @since xml 1.4 added support for the \a opts argument
*/
SaxIterator::constructor(string xml, string element_name, *hash opts) {
    ReferenceHolder<QoreSaxIterator> holder(new QoreSaxIterator(xml->stringRefSelf(), element_name->c_str(), opts, xsink), xsink);
    if (*xsink)
        return;
    self->setPrivate(CID_SAXITERATOR, holder.release());
}

//! Returns a copy of the current object (the copy will be reset to the beginning of the XML string)
/** @return a copy of the current object (the copy will be reset to the beginning of the XML string)

    @par Example:
    @code SaxIterator icopy = i.copy(); @endcode
*/
SaxIterator::copy() {
   ReferenceHolder<QoreSaxIterator> holder(new QoreSaxIterator(*i, xsink), xsink);
   if (*xsink)
      return;

   self->setPrivate(CID_SAXITERATOR, holder.release());
}

//! Moves the current position to the next element in the XML string; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the XML if the XML string contains the required element
/** This method will return @ref True again after it returns @ref False once if the XML string contains the target element, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the XML string (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while (i.next()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool SaxIterator::next() {
   if (i->check(xsink))
      return false;
   return i->next(xsink);
}

//! returns the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
while (i.next()) {
    printf("+ %y\n", i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
auto SaxIterator::getValue() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return QoreValue();
   return i->getReferencedValue(xsink);
}

//! returns @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not

    @par Example:
    @code
if (i.valid())
    printf("current value: %y\n", i.getValue());
    @endcode
 */
bool SaxIterator::valid() [flags=CONSTANT] {
   return i->valid();
}

//! Reset the iterator instance to its initial state
/** Reset the iterator instance to its initial state

   @par Example
   @code
i.reset();
   @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
SaxIterator::reset() {
   if (i->check(xsink))
       return QoreValue();
   i->reset(xsink);
}
