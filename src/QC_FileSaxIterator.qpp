/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SaxIterator.qpp defines the SaxIterator class */
/*
  QC_FileSaxIterator.qpp

  Qore Programming Language

  Copyright (C) 2003 - 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "qore-xml-module.h"

#include "QC_SaxIterator.h"

//! The FileSaxIterator class provides a SAX iterator for file-based XML data based on <a href="http://xmlsoft.org">libxml2</a>
/**
 */
qclass FileSaxIterator [arg=QoreSaxIterator* i; ns=Qore::Xml; vparent=SaxIterator];

//! creates a new FileSaxIterator object from the file name and the element name passed
/** @param path the path to a file containing the XML data to iterate
    @param element_name the name of the element to iterate through
    @param encoding an optional encoding for the file; if not given, then any encoding given in the file's XML preamble is used

    @par Example:
    @code
FileSaxIterator i(path, "DetailRecord");
map printf("record %d: %y\n", $#, $1), i;
    @endcode

    @throw XMLDOC-CONSTRUCTOR-ERROR error parsing XML string
 */
FileSaxIterator::constructor(string path, string element_name, *string encoding) [dom=FILESYSTEM] {
   ReferenceHolder<QoreSaxIterator> holder(new QoreSaxIterator(xsink, path->getBuffer(), element_name->getBuffer(), encoding ? encoding->getBuffer() : 0), xsink);
   if (*xsink)
      return;
   self->setPrivate(CID_FILESAXITERATOR, holder.release());
}

//! creates a new FileSaxIterator object from the file name and the element name passed
/** @param path the path to a file containing the XML data to iterate
    @param element_name the name of the element to iterate through
    @param opts the following options are accepted:
    - \c encoding: (string) the file's character encoding
    - \c xml_parse_options: (int bitfield) XML parsing flags; see @ref xml_parsing_constants for more information
    - \c xsd: (string) an XSD string for schema validation while parsing

    @par Example:
    @code
FileSaxIterator i(path, "DetailRecord");
map printf("record %d: %y\n", $#, $1), i;
    @endcode

    @throw XML-READER-ERROR error opening file
    @throw FILESAXITERATOR-OPTION-ERROR error in option hash

    @since xml 1.4
*/
FileSaxIterator::constructor(string path, string element_name, hash opts) [dom=FILESYSTEM] {
    const char* encoding = QoreSaxIterator::processOptionsGetEncoding(opts, xsink);
    if (*xsink)
        return;
    ReferenceHolder<QoreSaxIterator> holder(new QoreSaxIterator(xsink, path->getBuffer(), element_name->getBuffer(), encoding, opts), xsink);
    if (*xsink)
        return;
    self->setPrivate(CID_FILESAXITERATOR, holder.release());
}

//! Returns a copy of the current object (the copy will be reset to the beginning of the XML string)
/** @return a copy of the current object (the copy will be reset to the beginning of the XML string)

    @par Example:
    @code FileSaxIterator copy = i.copy(); @endcode
*/
FileSaxIterator::copy() {
   ReferenceHolder<QoreSaxIterator> holder(new QoreSaxIterator(*i, xsink), xsink);
   if (*xsink)
      return;

   self->setPrivate(CID_FILESAXITERATOR, holder.release());
}
