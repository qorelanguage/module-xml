# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file SoapClient.qm SOAP Client module implementation based on the WSDL classes

/*  SoapClient.qm Copyright (C) 2012 - 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 0.8.10

# requires XML functionality
%requires(reexport) xml

# requires the WSDL module
%requires(reexport) WSDL

# need mime definitions
%requires(reexport) Mime >= 1.1

# do not use $ for vars
%new-style

module SoapClient {
    version = "0.2.4.1";
    desc = "SoapClient module";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage SoapClient Module

    @tableofcontents

    @section soapclientintro Introduction to the SoapClient Module

    The SoapClient module implements a minimal SOAP client using WSDL, XSD, SOAP support implemented in the WSDL module.

    Create outgoing request messages by setting up a Qore data structure corresponding to the SOAP message.  Exceptions will be thrown if either the outgoing or the response message do not corespond to the WSDL.   The exceptions should be fairly verbose to allow you to quickly correct any mistakes.

    Currently the WSDL implementation is fairly basic so any messages using unimplemented features of SOAP or XSD will fail.

    This module requires the following modules which are also reexported to the program context:
    - <a href="../../xml/html/index.html">xml binary module</a>
    - <a href="../../WSDL/html/index.html">WSDL user module</a>
    - @ref mimeintro "Mime user module"

    @section Example

    Here is an example of how to use this module:
    @code
%requires SoapClient
SoapClient sc = new SoapClient(("wsdl" : "http://soap.server.org:8080/my-service?wsdl"));
hash msg = getMessage();
any result = sc.call("SubmitDocument", msg);
    @endcode

    The SoapClient::constructor() takes named arguments in the form of a hash; valid arguments are:
    - required keys: one of:
      - \c "wsdl" or \c "wsdl_file": a string defining the WSDL or the URL of the WSDL
    - optional keys:
      - \c "service": the name of the "portType" to use (if more than 1 portType is defined in the WSDL then this key is mandatory
      - \c "url": to override the URL defined in the WSDL
      - \c "headers": to override any HTTP headers sent in outgoing messages
      - \c "event_queue": to set an I/O event queue on the HTTPClient
      - \c "log": a @ref closure "closure" or @ref call_reference "call reference" taking a single string argument for informational logging
      - \c "dbglog": a @ref closure "closure" or @ref call_reference "call reference" taking a single string argument for verbose technical debugging logging

    Also the following keys can be set to set HTTP options:
    - \c "connect_timeout"
    - \c "http_version"
    - \c "max_redirects"
    - \c "proxy"
    - \c "timeout"

    @section soapclientrelnotes SoapClient Release Notes

    @subsection soapclient_0_2_4_1 SoapClient v0.2.4.1
    - added the @ref SoapClient::SoapClient::callOperation() method (<a href="https://github.com/qorelanguage/qore/issues/1226">issue 1226</a>)

    @subsection soapclient_0_2_4 SoapClient v0.2.4
    - handle SOAP fault messages returned with 500-series error codes as Fault messages
    - added optional logging closures, added SOAP headers to info hash when available
    - fixed URI request path, fixed agent string
    - added the following methods:
      - @ref SoapClient::SoapClient::addDefaultHeaders()
      - @ref SoapClient::SoapClient::getDefaultHeaders()
      - @ref SoapClient::SoapClient::getSendEncoding()
      - @ref SoapClient::SoapClient::getWebService()
      - @ref SoapClient::SoapClient::setContentEncoding()
      - @ref SoapClient::SoapClient::setSendEncoding()

    @subsection soapclient_0_2_3 SoapClient v0.2.3
    - updated to a user module
*/

#! main SoapClient namespace
public namespace SoapClient {
    #! SOAP client class implementation, publically inherits qore's HTTPClient class
    public class SoapClient inherits HTTPClient {
        #! version of the implementation of this class
        const Version = "0.2.4";

        #! default HTTP headers
        const Headers = ("Accept": (MimeTypeSoapXml + "," + MimeTypeXml + "," + MimeTypeXmlApp), "User-Agent": ("Qore-Soap-Client/" + SoapClient::Version));

        #! option keys passed to the HTTPClient constructor
        const HTTPOptions = ("connect_timeout", "http_version", "max_redirects", "proxy", "timeout");

        #! @cond nodoc
        private {
            # web service definition
            WSDL::WebService wsdl;
            # service name
            string svc;

            *code logc;
            *code dbglogc;

            # send content encoding hash
            *hash seh;
        }
        #! @endcond

        public {
            #! target URL
            string url;
            #! HTTP headers to use
            hash headers = Headers;

            #! Send content encoding options
            /** Send content encoding options are as follows:
                - \c "bzip": use bzip2 compression
                - \c "gzip": use gzip compression
                - \c "deflate": use deflate compression
                - \c "identity": use no content encoding
             */
            const EncodingSupport = (
                "gzip": (
                    "ce": "gzip",
                    "func": \gzip(),
                    ),
                "bzip2": (
                    "ce": "bzip2",
                    "func": \bzip2(),
                    ),
                "deflate": (
                    "ce": "deflate",
                    "func": \compress(),
                    ),
                "identity": (
                    "ce": NOTHING,
                    ),
                );

            #! default threadhold for data compressions; transfers smaller than this size will not be compressed
            const CompressionThreshold = 1024;
        }

        #! creates the object based on a %WSDL which is parsed to a @ref WSDL::WebService "WebService" object which provides the basis for all communication with this object
        /** one of either the \c wsdl or \c wsdl_file keys is required in the hash given to the constructor or an exception will be thrown
            @param h valid option keys:
            - \c wsdl: the URL of the web service or a @ref WSDL::WebService "WebService" object itself
            - \c wsdl_file: a path to use to load the %WSDL and create the @ref WSDL::WebService "WebService" object
            - \c url: override the target URL given in the %WSDL
            - \c send_encoding: a @ref EncodingSupport "send data encoding option" or the value \c "auto" which means to use automatic encoding; if not present defaults to no content-encoding on sent message bodies
            - \c content_encoding: for possible values, see @ref EncodingSupport; this sets the send encoding (if the \c "send_encoding" option is not set) and the requested response encoding
            - [\c service]: in case multiple service entries are found in the WSDL, give the one to be used here
            - [\c port]: in case multiple port entries are found in the WSDL, give the one to be used here
            - [\c log]: a log closure or call reference taking a single string giving the log message
            - [\c dbglog]: a log closure or call reference taking a single string giving the debug log message
            - also all options from SoapClient::SoapClient::HTTPOptions, which are passed to the HTTPClient constructor
        */
        constructor(hash h) : HTTPClient(h{HTTPOptions}) {
            if (exists h.wsdl_file && exists h.wsdl)
                throw "SOAP-CLIENT-ERROR", "only one of 'wsdl' or 'wsdl_file' keys can be given; both were passed";

            if (h.event_queue)
                setEventQueue(h.event_queue);

            *string def_path;
            any twsdl;
            # get web service definition
            if (exists h.wsdl_file)
                twsdl = WSDLLib::getWSDL(h.wsdl_file, self, h.headers, \def_path);
            else if (exists h.wsdl)
                twsdl = WSDLLib::getWSDL(h.wsdl, self, h.headers, \def_path);
            else
                throw "SOAP-CLIENT-ERROR", "neither one of required 'wsdl' or 'wsdl_file' keys is present in the hash argument to SoapClient::constructor()";

            if (!exists twsdl)
                throw "SOAP-CLIENT-ERROR", "missing wsdl in SoapClient::constructor()";

            wsdl = twsdl = twsdl instanceof WebService ? twsdl : new WebService(twsdl, ("http_client" : self, "http_headers" : h.headers, "def_path": def_path) + h.wsdl_opt);

            # set service
            # get list of services in this wsdl
            list svcl = wsdl.listServices();
            if (svcl.size() > 1 && !h.service)
                throw "SOAP-CLIENT-ERROR", sprintf("no 'service' key passed in the option hash argument to SoapClient::constructor() (WSDL defines the following services: %y)", (map $1.name, svcl));

            svc = h.service ?? svcl[0].name;

            hash svch = wsdl.getService(svc);

            url = h.url ?? svch.port.firstValue().address;

            headers += h.headers;
            # setup default headers
            if (wsdl.isSoap12())
                headers += ("Content-Type": MimeTypeSoapXml);
            else
                headers += ("Content-Type": MimeTypeXml);

            if (h.send_encoding)
                setSendEncoding(h.send_encoding);

            if (h.content_encoding) {
                if (!h.send_encoding)
                    setSendEncoding(h.content_encoding);
                else if (!EncodingSupport.(h.content_encoding))
                    throw "SOAPCLIENT-ERROR", sprintf("content encoding option %y is unknown; valid options: %y", h.content_encoding, EncodingSupport.keys());
                h.headers."Accept-Encoding" = h.content_encoding;
            }

            # unconditionally set the encoding to utf-8
            setEncoding("utf-8");

            # set URL
            setURL(url);

            if (h.log)
                logc = h.log;
            if (h.dbglog)
                dbglogc = h.dbglog;
        }

        #! returns a hash representing the serialized SOAP request for a given @ref WSDL::WSOperation "WSOperation"
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param args the arguments to the SOAP operation
            @param header data structure for the SOAP header, if required by the message
            @param op a reference to return the @ref WSDL::WSOperation "WSOperation" object found
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            @param xml_opts an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            @param soapaction an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body

            @throw SOAP-CLIENT-ERROR the operation is not defined in the WSDL

            @note content encoding is not applied here but rather internally by the call() methods
        */
        hash getMsg(string operation, any args, *hash header, reference op, *hash nsh, *int xml_opts, *string soapaction) {
            op = wsdl.getOperation(operation);
            hash msg = op.serializeRequest(args, header, getEncoding(), nsh, xml_opts, soapaction);
            if (msg.hdr."Content-Type" !~ /charset=/i)
                msg.hdr."Content-Type" += ";charset=" + getEncoding();

            return msg;
        }

        #! makes a server call with the given operation, arguments, options, and optional info hash reference and returns the result
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param args the arguments to the SOAP operation
            @param opts an optional hash of options for the call as follows:
            - \c soap_header: a hash giving SOAP header information, if required by the message
            - \c http_header: a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            - \c xml_opts: an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            - \c soapaction: an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers)

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body

            @since %SoapClient 0.2.4.1
         */
        any callOperation(string operation, any args, *hash opts, *reference info) {
            return makeCallIntern(\info, operation, args, opts.soap_header, opts.http_header, opts.xml_opts, opts.soapaction);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param args the arguments to the SOAP operation
            @param header optional soap headers (if required by the operation)
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            @param xml_opts an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(string operation, any args, *hash header, *hash nsh) {
            hash info;
            return makeCallIntern(\info, operation, args, header, nsh);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param args the arguments to the SOAP operation
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(string operation, any args, *reference info) {
            return makeCallIntern(\info, operation, args);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result with an output argument giving technical information about the call
        /** @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers)
            @param operation the operation name for the SOAP call
            @param args the arguments to the SOAP operation
            @param header optional soap headers (if required by the operation)
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(reference info, string operation, any args, *hash header, *hash nsh) {
            return makeCallIntern(\info, operation, args, header, nsh);
        }

        #! makes the call to the SOAP server and ensures that SOAP fault responses returned with a 500-series status code are processed as a SOAP fault so that error information is returned in the resulting exception
        private any makeCallIntern(*reference info, string operation, any args, *hash header, *hash nsh, *int xml_opts, *string override_soapaction) {
            WSOperation op;
            hash msg = getMsg(operation, args, header, \op, nsh, xml_opts, override_soapaction);
            hash hdr = headers + msg.hdr;

            # we have to write the request key after the HTTPClient::post() call
            on_exit info.request = ("body": msg.body, "headers": hdr, "soap_headers": header);

            date now = now_us();
            on_exit {
                log("completed call to %y: %y", operation, now_us() - now);
                dbglog("info: %Y", info);
            }

            # apply content encoding here
            data body = msg.body;
            if (seh.ce && body.size() > CompressionThreshold) {
                hdr."Content-Encoding" = seh.ce;
                body = seh.func(body);
            }

            try {
                info.response = send(body, "POST", NOTHING, hdr, True, \info);
            }
            catch (hash ex) {
                # allow fault responses returned with a 500-series status code to be processed as a SOAP fault so that error information is returned in the exception
                if (ex.err == "HTTP-CLIENT-RECEIVE-ERROR" && ex.arg.status_code >= 500 && ex.arg.status_code < 600 && ex.arg.body =~ /<\?xml.*Fault/)
                    info.response = ex.arg;
                else
                    rethrow;
            }

            hash xmldata = WSDLLib::parseSOAPMessage(info.response);
            #printf("DEBUG ans: %s\n", info.response);
            return op.deserializeResponse(xmldata);
        }

        #! uses SoapClient::call() to transparently serialize the argument and make a call to the given operation and return the deserialized results
        /** @param op the operation name, which is the method name passed to methodGate()
            @param arg a list or arguments or a single argument (or NOTHING) for the operation

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any methodGate(string op, any arg) {
            return call(op, arg);
        }

        #! returns a hash that can be used to ensure serialization with the XSD type given as the \a type argument
        hash getType(string type, any v) {
            return wsdl.getType(type, v);
        }

        #! returns the WSDL::WebService object associated with this object
        WSDL::WebService getWebService() {
            return wsdl;
        }

        #! change the data content encoding (compression) option for the object; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
sc.setSendEncoding("gzip");
            @endcode

            The default is to send requests unencoded/uncompressed.

            @param enc the data content encoding (compression) option for the object; see @ref EncodingSupport for valid options; if the value \c "auto" is passed then \c "gzip" encoding is used

            @throw SOAPCLIENT-ERROR invalid or unsupported data content encoding / compression option

            @see
            - @ref SoapClient::SoapClient::setContentEncoding() "SoapClient::setContentEncoding()"
            - @ref SoapClient::SoapClient::getSendEncoding() "SoapClient::getSendEncoding()"
        */
        setSendEncoding(string enc = "auto") {
            if (enc == "auto")
                seh = EncodingSupport.firstValue();
            else {
                if (!EncodingSupport{enc})
                    throw "SOAPCLIENT-ERROR", sprintf("send content encoding option %y is unknown; valid options: %y", enc, EncodingSupport.keys());
                seh = EncodingSupport{enc};
            }
        }

        #! sets the request and desired response encoding for the object; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
soap.setContentEncoding("gzip");
            @endcode

            @param enc the data content encoding (compression) option for requests and the desired response content encoding for the object; see @ref EncodingSupport for valid options; if the value \c "auto" is passed then \c "gzip" encoding is used for outgoing requests and requested for responses

            @throw SOAPCLIENT-ERROR invalid or unsupported data content encoding / compression option

            @see
            - @ref SoapClient::SoapClient::getSendEncoding() "SoapClient::getSendEncoding()"
            - @ref SoapClient::SoapClient::setSendEncoding() "SoapClient::setSendEncoding()"

            @since %SoapClient 0.2.4
        */
        setContentEncoding(string enc = "auto") {
            if (enc == "auto")
                seh = EncodingSupport.firstValue();
            else
                setSendEncoding(enc);

            headers."Accept-Encoding" = seh.ce ?? "identity";
        }

        #! adds default headers to each request; these headers will be sent in all requests but can be overridden in requests as well
        /** @par Example:
            @code{.py}
# disable gzip and bzip encoding in responses
soap.addDefaultHeaders(("Accept-Encoding": "compress"));
            @endcode

            @param h a hash of headers to add to the default headers to send on each request

            @note default headers can also be set in the constructor

            @see @ref SoapClient::SoapClient::getDefaultHeaders() "SoapClient::getDefaultHeaders()"

            @since %SoapClient 0.2.4
        */
        addDefaultHeaders(hash h) {
            headers += h;
        }

        #! returns the hash of default headers to sent in all requests
        /** @par Example:
            @code{.py}
hash h = soap.getDefaultHeaders();
            @endcode

            @return the hash of default headers to sent in all requests

            @note default headers can be set in the constructor and in addDefaultHeaders()

            @see @ref SoapClient::SoapClient::addDefaultHeaders() "SoapClient::addDefaultHeaders()"

            @since %SoapClient 0.2.4
        */
        hash getDefaultHeaders() {
            return headers;
        }

        #! returns the current data content encoding (compression) object or @ref nothing if no encoding option is set; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
*string ce = soap.getSendEncoding();
            @endcode

            @return the current data content encoding (compression) object or @ref nothing if no encoding option is set; see @ref EncodingSupport for valid options

            @see
            - @ref SoapClient::SoapClient::setContentEncoding() "SoapClient::setContentEncoding()"
            - @ref SoapClient::SoapClient::setSendEncoding() "SoapClient::setSendEncoding()"

            @since %SoapClient 0.2.4
        */
        *string getSendEncoding() {
            return seh.ce;
        }

        #! sends a log message to the log closure or call reference, if any
        log(string msg) {
            if (logc)
                call_function(logc, "SoapClient: " + trim(vsprintf(msg, argv)));
        }

        #! sends a log message to the debug log closure or call reference, if any
        dbglog(string msg) {
            if (dbglogc)
                call_function(dbglogc, "SoapClient: " + trim(vsprintf(msg, argv)));
        }
    }
}
