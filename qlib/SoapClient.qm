# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file SoapClient.qm SOAP Client module implementation based on the WSDL classes

/*  SoapClient.qm Copyright (C) 2012 - 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 0.8.12

# requires XML functionality
%requires(reexport) xml

# requires the WSDL module
%requires(reexport) WSDL

# need mime definitions
%requires(reexport) Mime >= 1.1

# provides a connection class
%requires(reexport) ConnectionProvider

# do not use $ for vars
%new-style

# do not ignore argument errors
%strict-args

# require type declarations
%require-types

# enable all warnings
%enable-all-warnings

module SoapClient {
    version = "0.2.5";
    desc = "SoapClient module";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage SoapClient Module

    @tableofcontents

    @section soapclientintro Introduction to the SoapClient Module

    The %SoapClient module implements a SOAP client for %Qore using WSDL, XSD, and SOAP support implemented in the <a href="../../WSDL/html/index.html">WSDL</a> module.

    Create outgoing request messages by setting up a Qore data structure corresponding to the SOAP message.  Exceptions will be thrown if either the outgoing or the response message do not corespond to the WSDL.  The exceptions should be fairly verbose to allow you to quickly correct any mistakes.

    This module provides the following classes:
    - @ref SoapClient::SoapClient "SoapClient"
    - @ref SoapClient::SoapConnection "SoapConnection"

    This module requires the following modules which are also reexported to the program context:
    - <a href="../../xml/html/index.html">xml</a> binary module
    - <a href="../../WSDL/html/index.html">WSDL</a> user module
    - @ref mimeintro "Mime user module"

    @section Example

    Here is an example of how to use this module:
    @code{.py}
%requires SoapClient
SoapClient sc = new SoapClient(("wsdl" : "http://soap.server.org:8080/my-service?wsdl"));
hash msg = getMessage();
any result = sc.call("SubmitDocument", NOTHING, msg);
    @endcode

    The SoapClient::constructor() takes named arguments in the form of a hash; valid arguments are:
    - required keys: one of:
      - \c "wsdl" or \c "wsdl_file": a string defining the WSDL or the URL of the WSDL
    - optional keys:
      - \c "service": the name of the "portType" to use (if more than 1 portType is defined in the WSDL then this key is mandatory
      - \c "url": to override the URL defined in the WSDL
      - \c "headers": to override any HTTP headers sent in outgoing messages
      - \c "event_queue": to set an I/O event queue on the HTTPClient
      - \c "log": a @ref closure "closure" or @ref call_reference "call reference" taking a single string argument for informational logging
      - \c "dbglog": a @ref closure "closure" or @ref call_reference "call reference" taking a single string argument for verbose technical debugging logging

    Also the following keys can be set to set HTTP options:
    - \c "connect_timeout"
    - \c "http_version"
    - \c "max_redirects"
    - \c "proxy"
    - \c "timeout"

    @section soapclientrelnotes SoapClient Release Notes

    @subsection soapclient_0_2_5 SoapClient v0.2.5
    - added support for logging content of SOAP messages
    - added the @ref SoapClient::SoapConnection "SoapConnection" class

    @subsection soapclient_0_2_4_1 SoapClient v0.2.4.1
    - added the @ref SoapClient::SoapClient::callOperation() method (<a href="https://github.com/qorelanguage/qore/issues/1226">issue 1226</a>)
    - updated SOAP response processing to throw an exception when the server responds with an error code (<a href="https://github.com/qorelanguage/qore/issues/1228">issue 1228</a>)
    - fixed a typo in a debug logging statement (<a href="https://github.com/qorelanguage/qore/issues/1358">issue 1358</a>)
    - fixed and documented the "info" output hash format (<a href="https://github.com/qorelanguage/qore/issues/1359">issue 1359</a>)
    - fixed a bug in the SoapClient::constructor() where a WebService object was not supported (<a href="https://github.com/qorelanguage/qore/issues/1424">issue 1424</a>)

    @subsection soapclient_0_2_4 SoapClient v0.2.4
    - handle SOAP fault messages returned with 500-series error codes as Fault messages
    - added optional logging closures, added SOAP headers to info hash when available
    - fixed URI request path, fixed agent string
    - added the following methods:
      - @ref SoapClient::SoapClient::addDefaultHeaders()
      - @ref SoapClient::SoapClient::getDefaultHeaders()
      - @ref SoapClient::SoapClient::getSendEncoding()
      - @ref SoapClient::SoapClient::getWebService()
      - @ref SoapClient::SoapClient::setContentEncoding()
      - @ref SoapClient::SoapClient::setSendEncoding()

    @subsection soapclient_0_2_3 SoapClient v0.2.3
    - updated to a user module
*/

#! main SoapClient namespace
public namespace SoapClient {
    #! SOAP client class implementation, publically inherits qore's HTTPClient class
    public class SoapClient inherits HTTPClient {
        #! version of the implementation of this class
        const Version = "0.2.5";

        #! default HTTP headers
        const Headers = ("Accept": (MimeTypeSoapXml + "," + MimeTypeXml + "," + MimeTypeXmlApp), "User-Agent": ("Qore-Soap-Client/" + SoapClient::Version));

        #! option keys passed to the HTTPClient constructor
        const HTTPOptions = ("connect_timeout", "http_version", "max_redirects", "proxy", "timeout");

        #! @cond nodoc
        private {
            # web service definition
            WSDL::WebService wsdl;
            # service name
            string svc;

            *code logc;
            *code dbglogc;

            # send content encoding hash
            *hash seh;
        }
        #! @endcond

        public {
            #! target URL
            string url;
            #! HTTP headers to use
            hash headers = Headers;

            #! Send content encoding options
            /** Send content encoding options are as follows:
                - \c "bzip": use bzip2 compression
                - \c "gzip": use gzip compression
                - \c "deflate": use deflate compression
                - \c "identity": use no content encoding
             */
            const EncodingSupport = (
                "gzip": (
                    "ce": "gzip",
                    "func": \gzip(),
                    ),
                "bzip2": (
                    "ce": "bzip2",
                    "func": \bzip2(),
                    ),
                "deflate": (
                    "ce": "deflate",
                    "func": \compress(),
                    ),
                "identity": (
                    "ce": NOTHING,
                    ),
                );

            #! default threadhold for data compressions; transfers smaller than this size will not be compressed
            const CompressionThreshold = 1024;
        }

        #! creates the object based on a %WSDL which is parsed to a @ref WSDL::WebService "WebService" object which provides the basis for all communication with this object
        /** one of either the \c wsdl or \c wsdl_file keys is required in the hash given to the constructor or an exception will be thrown
            @param h valid option keys:
            - \c wsdl: the URL of the web service or a @ref WSDL::WebService "WebService" object itself
            - \c wsdl_file: a path to use to load the %WSDL and create the @ref WSDL::WebService "WebService" object
            - \c url: override the target URL given in the %WSDL
            - \c send_encoding: a @ref EncodingSupport "send data encoding option" or the value \c "auto" which means to use automatic encoding; if not present defaults to no content-encoding on sent message bodies
            - \c content_encoding: for possible values, see @ref EncodingSupport; this sets the send encoding (if the \c "send_encoding" option is not set) and the requested response encoding
            - [\c service]: in case multiple service entries are found in the WSDL, give the one to be used here
            - [\c port]: in case multiple port entries are found in the WSDL, give the one to be used here
            - [\c log]: a log closure or call reference taking a single string giving the log message
            - [\c dbglog]: a log closure or call reference taking a single string giving the debug log message
            - also all options from SoapClient::SoapClient::HTTPOptions, which are passed to the HTTPClient constructor
        */
        constructor(hash h) : HTTPClient(h{HTTPOptions}) {
            if (exists h.wsdl_file && exists h.wsdl)
                throw "SOAP-CLIENT-ERROR", "only one of 'wsdl' or 'wsdl_file' keys can be given; both were passed";

            if (h.event_queue)
                setEventQueue(h.event_queue);

            if (h.wsdl instanceof WebService) {
                wsdl = h.wsdl;
            }
            else {
                *string def_path;
                any twsdl;
                # get web service definition
                if (exists h.wsdl_file)
                    twsdl = WSDLLib::getWSDL(h.wsdl_file, self, h.headers, \def_path);
                else if (exists h.wsdl)
                    twsdl = WSDLLib::getWSDL(h.wsdl, self, h.headers, \def_path);
                else
                    throw "SOAP-CLIENT-ERROR", "neither one of required 'wsdl' or 'wsdl_file' keys is present in the hash argument to SoapClient::constructor()";

                if (!exists twsdl)
                    throw "SOAP-CLIENT-ERROR", "missing wsdl in SoapClient::constructor()";

                wsdl = twsdl = twsdl instanceof WebService ? twsdl : new WebService(twsdl, ("http_client" : self, "http_headers" : h.headers, "def_path": def_path) + h.wsdl_opt);
            }

            # set service
            # get list of services in this wsdl
            list svcl = wsdl.listServices();
            if (svcl.size() > 1 && !h.service)
                throw "SOAP-CLIENT-ERROR", sprintf("no 'service' key passed in the option hash argument to SoapClient::constructor() (WSDL defines the following services: %y)", (map $1.name, svcl));

            svc = h.service ?? svcl[0].name;

            hash svch = wsdl.getService(svc);

            url = h.url ?? svch.port.firstValue().address;

            headers += h.headers;
            # setup default headers
            if (wsdl.isSoap12())
                headers += ("Content-Type": MimeTypeSoapXml);
            else
                headers += ("Content-Type": MimeTypeXml);

            if (h.send_encoding)
                setSendEncoding(h.send_encoding);

            if (h.content_encoding) {
                if (!h.send_encoding)
                    setSendEncoding(h.content_encoding);
                else if (!EncodingSupport.(h.content_encoding))
                    throw "SOAPCLIENT-ERROR", sprintf("content encoding option %y is unknown; valid options: %y", h.content_encoding, EncodingSupport.keys());
                h.headers."Accept-Encoding" = h.content_encoding;
            }

            # unconditionally set the encoding to utf-8
            setEncoding("utf-8");

            # set URL
            setURL(url);

            if (h.log)
                logc = h.log;
            if (h.dbglog)
                dbglogc = h.dbglog;
        }

        #! returns a hash representing the serialized SOAP request for a given @ref WSDL::WSOperation "WSOperation"
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param binding SOAP binding name, if not provided use the first binding assigned to operation
            @param args the arguments to the SOAP operation
            @param header data structure for the SOAP header, if required by the message
            @param op a reference to return the @ref WSDL::WSOperation "WSOperation" object found
            @param b a reference to return the @ref WSDL::Binding "Binding" object found
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            @param xml_opts an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            @param soapaction an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body
            - \c path: the path part of URL
            - \c method: the HTTP request method

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw WSDL-BINDING-ERROR the binding is not assigned to operation in the WSDL

            @note content encoding is not applied here but rather internally by the call() methods
        */
        hash getMsg(string operation, *string binding, any args, *hash header, reference op, *hash nsh, *int xml_opts, *string soapaction) {
            op = wsdl.getOperation(operation);
            hash msg = op.serializeRequest(args, binding, header, getEncoding(), nsh, xml_opts, soapaction);
            if (msg.hdr."Content-Type" !~ /charset=/i && msg.body.typeCode != NT_BINARY)
                msg.hdr."Content-Type" += ";charset=" + getEncoding();

            return msg;
        }
        deprecated hash getMsg(string operation, any args, *hash header, reference op, *hash nsh, *int xml_opts, *string soapaction) {
            return getMsg(operation, NOTHING, args, header, \op, nsh, xml_opts, soapaction);
        }

        #! makes a server call with the given operation, arguments, options, and optional info hash reference and returns the result
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param binding SOAP binding name, if not provided use the first binding assigned to operation
            @param args the arguments to the SOAP operation
            @param opts an optional hash of options for the call as follows:
            - \c soap_header: a hash giving SOAP header information, if required by the message
            - \c http_header: a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            - \c xml_opts: an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            - \c soapaction: an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw WSDL-BINDING-ERROR the binding is not assigned to operation in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"

            @since %SoapClient 0.2.4.1
         */
        any callOperation(string operation, *string binding, any args, *hash opts, *reference info) {
            return makeCallIntern(\info, operation, binding, args, opts.soap_header, opts.http_header, opts.xml_opts, opts.soapaction);
        }

        deprecated any callOperation(string operation, any args, *hash opts, *reference info) {
            return callOperation(operation, NOTHING, args, opts, \info);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param binding SOAP binding name, if not provided use the first binding assigned to operation
            @param args the arguments to the SOAP operation
            @param header optional soap headers (if required by the operation)
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            @param xml_opts an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)

            @return the deserialized result of the SOAP call to the SOAP server

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw WSDL-BINDING-ERROR the binding is not assigned to operation in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
        */
        any call(string operation, *string binding, any args, *hash header, *hash nsh) {
            hash info;
            return makeCallIntern(\info, operation, binding, args, header, nsh);
        }

        deprecated any call(string operation, any args, *hash header, *hash nsh) {
            return call(operation, NOTHING, args, header, nsh);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param binding SOAP binding name, if not provided use the first binding assigned to operation
            @param args the arguments to the SOAP operation
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)

            @return the deserialized result of the SOAP call to the SOAP server

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw WSDL-BINDING-ERROR the binding is not assigned to operation in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
        */
        any call(string operation, *string binding, any args, *reference info) {
            return makeCallIntern(\info, operation, binding, args);
        }
        deprecated any call(string operation, any args, *reference info) {
            return call(operation, NOTHING, args, \info);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result with an output argument giving technical information about the call
        /** @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)
            @param operation the operation name for the SOAP call
            @param binding SOAP binding name, if not provided use the first binding assigned to operation
            @param args the arguments to the SOAP operation
            @param header optional soap headers (if required by the operation)
            @param nsh a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)

            @return the deserialized result of the SOAP call to the SOAP server

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw WSDL-BINDING-ERROR the binding is not assigned to operation in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
        */
        any call(reference info, string operation, *string binding, any args, *hash header, *hash nsh) {
            return makeCallIntern(\info, operation, binding, args, header, nsh);
        }
        deprecated any call(reference info, string operation, any args, *hash header, *hash nsh) {
            return call(\info, operation, NOTHING, args, header, nsh);
        }

        #! makes the call to the SOAP server and ensures that SOAP fault responses returned with a 500-series status code are processed as a SOAP fault so that error information is returned in the resulting exception
        private any makeCallIntern(*reference info, string operation, *string binding, any args, *hash header, *hash nsh, *int xml_opts, *string soapaction) {
            WSOperation op;
            hash msg = getMsg(operation, binding, args, header, \op, nsh, xml_opts, soapaction);
            hash hdr = headers + msg.hdr;

            date now = now_us();
            on_exit {
                log("completed call to %y: %y", operation, now_us() - now);
                dbglog("info: %N", info);
            }

            # we have to write the request key after the HTTPClient::post() call but before the log message above
            # (on_exit statements are executed in reverse order when the block is exited)
            on_exit info += ("request-body": msg.body, "request-soap-headers": header);
            msglog(('reason': 'request', 'method': msg.method, 'path': msg.path, 'header': hdr, 'body': msg.body));
            # apply content encoding here
            data body = msg.body;
            if (seh.ce && body.size() > CompressionThreshold) {
                hdr."Content-Encoding" = seh.ce;
                body = seh.func(body);
            }

            hash rh;
            try {
                rh = send(body, msg.method, msg.path, hdr, True, \info);
                info."response-body" = rh.body;
            }
            catch (hash ex) {
                # allow fault responses returned with a 500-series status code to be processed as a SOAP fault so that error information is returned in the exception
                if (ex.err == "HTTP-CLIENT-RECEIVE-ERROR") {
                    if (ex.arg.status_code >= 500 && ex.arg.status_code < 600 && ex.arg.body =~ /<\?xml.*Fault/) {
                        info."response-body" = ex.arg.body;
                    }
                    msglog(('reason': 'error', 'code': ex.arg.status_code, 'header': ex.arg.header, 'body': ex.arg.body));
                }
                rethrow;
            }

            hash rmsg = WSDLLib::parseMultiPartSOAPMessage(rh);
            msglog(('reason': 'response', 'header': rmsg.header, 'body': rmsg.body));
            hash xmldata = WSDLLib::parseSOAPMessage(rmsg);
            #printf("DEBUG ans: %s\n", rh);
            return op.deserializeResponse(xmldata, binding);
        }

        #! uses SoapClient::call() to transparently serialize the argument and make a call to the given operation and return the deserialized results
        /** @param op the operation name, which is the method name passed to methodGate()
            @param arg a list or arguments or a single argument (or NOTHING) for the operation

            @return the deserialized result of the SOAP call to the SOAP server

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
        */
        any methodGate(string op, any arg) {
            return call(op, NOTHING, arg);
        }

        #! returns a hash that can be used to ensure serialization with the XSD type given as the \a type argument
        hash getType(string type, any v) {
            return wsdl.getType(type, v);
        }

        #! returns the WSDL::WebService object associated with this object
        WSDL::WebService getWebService() {
            return wsdl;
        }

        #! change the data content encoding (compression) option for the object; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
sc.setSendEncoding("gzip");
            @endcode

            The default is to send requests unencoded/uncompressed.

            @param enc the data content encoding (compression) option for the object; see @ref EncodingSupport for valid options; if the value \c "auto" is passed then \c "gzip" encoding is used

            @throw SOAPCLIENT-ERROR invalid or unsupported data content encoding / compression option

            @see
            - @ref SoapClient::setContentEncoding()
            - @ref SoapClient::getSendEncoding()
        */
        setSendEncoding(string enc = "auto") {
            if (enc == "auto")
                seh = EncodingSupport.firstValue();
            else {
                if (!EncodingSupport{enc})
                    throw "SOAPCLIENT-ERROR", sprintf("send content encoding option %y is unknown; valid options: %y", enc, EncodingSupport.keys());
                seh = EncodingSupport{enc};
            }
        }

        #! sets the request and desired response encoding for the object; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
soap.setContentEncoding("gzip");
            @endcode

            @param enc the data content encoding (compression) option for requests and the desired response content encoding for the object; see @ref EncodingSupport for valid options; if the value \c "auto" is passed then \c "gzip" encoding is used for outgoing requests and requested for responses

            @throw SOAPCLIENT-ERROR invalid or unsupported data content encoding / compression option

            @see
            - @ref SoapClient::getSendEncoding()
            - @ref SoapClient::setSendEncoding()

            @since %SoapClient 0.2.4
        */
        setContentEncoding(string enc = "auto") {
            if (enc == "auto")
                seh = EncodingSupport.firstValue();
            else
                setSendEncoding(enc);

            headers."Accept-Encoding" = seh.ce ?? "identity";
        }

        #! adds default headers to each request; these headers will be sent in all requests but can be overridden in requests as well
        /** @par Example:
            @code{.py}
# disable gzip and bzip encoding in responses
soap.addDefaultHeaders(("Accept-Encoding": "compress"));
            @endcode

            @param h a hash of headers to add to the default headers to send on each request

            @note default headers can also be set in the constructor

            @see @ref SoapClient::SoapClient::getDefaultHeaders() "SoapClient::getDefaultHeaders()"

            @since %SoapClient 0.2.4
        */
        addDefaultHeaders(hash h) {
            headers += h;
        }

        #! returns the hash of default headers to sent in all requests
        /** @par Example:
            @code{.py}
hash h = soap.getDefaultHeaders();
            @endcode

            @return the hash of default headers to sent in all requests

            @note default headers can be set in the constructor and in addDefaultHeaders()

            @see @ref SoapClient::addDefaultHeaders()

            @since %SoapClient 0.2.4
        */
        hash getDefaultHeaders() {
            return headers;
        }

        #! returns the current data content encoding (compression) object or @ref nothing if no encoding option is set; see @ref EncodingSupport for valid options
        /** @par Example:
            @code{.py}
*string ce = soap.getSendEncoding();
            @endcode

            @return the current data content encoding (compression) object or @ref nothing if no encoding option is set; see @ref EncodingSupport for valid options

            @see
            - @ref SoapClient::setContentEncoding()
            - @ref SoapClient::setSendEncoding()

            @since %SoapClient 0.2.4
        */
        *string getSendEncoding() {
            return seh.ce;
        }

        #! sends a log message to the log closure or call reference, if any
        log(string msg) {
            if (logc)
                call_function(logc, "SoapClient: " + trim(vsprintf(msg, argv)));
        }

        #! sends a log message to the debug log closure or call reference, if any
        dbglog(string msg) {
            if (dbglogc)
                call_function(dbglogc, "SoapClient: " + trim(vsprintf(msg, argv)));
        }
        /** Method is to be overriden to implement custom logging HTTP message sent and received from this object.
            @par msg information about message to be logged. There are keys 'reason' with value 'request', 'response' or 'error',
                 'header' (HTTP header, in casew ) and 'body' containing XML data in readable form, i.e. uncompressed and in case of
                 multipart message only the related part is passed. Method is executed before message is sent or after
                 has been received. Do not allow exception raising in method not to interrupt client function.

            @par Example:
            @code{.py}
private nothing msglog(hash msg) {
    log(sprintf("%s:\n%s\n", msg.reason, msg.body));
}
            @endcode

            @since %SoapClient 0.2.5
        */
        private nothing msglog(hash msg) {
            # implement functionality in derived class
        }
    }

    #! class for SOAP connections; returns an object of class @ref SoapClient for connecting to SOAP servers
    /** supports the following static initialization options:
        - \c "connect_timeout": connection timeout to use in milliseconds
        - \c "content_encoding": this sets the send encoding (if the \c "send_encoding" option is not set) and the requested response encoding; for possible values, see @ref SoapClient::EncodingSupport  "EncodingSupport"
        - \c "http_version": HTTP version to use (\c "1.0" or \c "1.1", defaults to \c "1.1")
        - \c "max_redirects": maximum redirects to support
        - \c "port": in case multiple port entries are found in the WSDL, give the one to be used here
        - \c "portType": in case multiple portType entries are found in the WSDL, give the one to be used here
        - \c "proxy": proxy URL to use
        - \c "send_encoding": a @ref SoapClient::EncodingSupport "send data encoding option" or the value \c "auto" which means to use automatic encoding; if not present defaults to no content-encoding on sent message bodies
        - \c "target_url": overrides the URL in the WSDL (mapped to \c "url" in the @ref SoapClient::constructor(hash) "SoapClient::constructor()" argument)
        - \c "timeout": transfer timeout to use in milliseconds
        - \c "wsdl": overrides the WSDL URL provided by the connection URL; \c "wsdl" values with a \c "file://" scheme are subject to environment variable substitution

        @see @ref SoapClient::constructor(hash) for more information on the above options

        @note additionally supports the following runtime options in getImpl() for connection logging:
        - \c "log": a closure accepting a single string for logging
        - \c "dbglog": a closure taking a single string for detailed technical connection logging
    */
    public class SoapConnection inherits HttpBasedConnection {
        public {
            hash real_opts;
        }

        public {
            const Options = HttpConnection::Options + (
                "content_encoding": True,
                "port": True,
                "portType": True,
                "send_encoding": True,
                "target_url": True,
                "wsdl": True,
                );
        }

        #! creates the SoapConnection object
        /** @param name the name of the connection
            @param desc connection description
            @param url connection URL
            @param monitor monitoring flag
            @param n_opts connection options
            @param urlh broken down URL hash (as returned by @ref Qore::parse_url())
        */
        constructor(string name, string desc, string url, bool monitor, *hash n_opts, hash urlh) : HttpBasedConnection(name, desc, url, monitor, n_opts, urlh) {
            # do environment variable substitution in wsdl option if applicable
            if (!opts.wsdl) {
                # check if we have a local path to the WSDL
                hash h = parse_url(real_url);
                if (h.protocol == "http" && h.size() == 2 && h.path)
                    real_url =~ s/^http/file/;
            }

            real_opts = ("wsdl": real_url) + opts;
            # rename "target_url" to "url"
            real_opts.url = remove opts.target_url;
        }

        #! returns \c "soap"
        string getType() {
            return "soap";
        }

        #! returns runtime options
        /** @return a hash with the following keys reflecting support for the corresponding runtime options in getImpl() for connection logging:
            - \c "log": a closure accepting a single string for logging
            - \c "dbglog": a closure taking a single string for detailed technical connection logging
        */
        *hash getRuntimeOptions() {
            return (
                "log": True,
                "dbglog": True,
                );
        }

        #! returns a @ref SoapClient object
        /** @param connect if @ref Qore::True "True", then @ref Qore::HTTPClient::connect() "SoapClient::connect()" is called
            @param rtopts supports the following runtime options in getImpl() for connection logging:
            - \c "log": a closure accepting a single string for logging
            - \c "dbglog": a closure taking a single string for detailed technical connection logging

            @return a @ref SoapClient object
        */
        private SoapClient getImpl(bool connect = True, *hash rtopts) {
            SoapClient sc(real_opts + rtopts.("log", "dbglog"));
            if (connect)
                sc.connect();
            return sc;
        }

        #! gets options
        hash getOptions() {
            return Options;
        }

        #! returns default options
        *hash getDefaultOptions() {
            return HttpConnection::DefaultOptions;
        }

        #! static constructor
        static SoapConnection make(string name, string desc, string url, bool monitor, *hash opts, hash urlh) {
            return new SoapConnection(name, desc, url, monitor, opts, urlh);
        }
    }
}
