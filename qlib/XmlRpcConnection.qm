# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file XmlRpcConnection.qm XML-RPC client connection module implementation

/*  XmlRpcConnections.qm Copyright 2013 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%strict-args

%requires(reexport) xml
#%requires Util >= 1.0
%requires(reexport) ConnectionProvider >= 1.1

%new-style

module XmlRpcConnection {
    version = "1.1";
    desc = "user module for providing XML-RPC client connections";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage XmlRpcConnection Module

    @tableofcontents

    @section xmlrpcconnectionintro Introduction to the XmlRpcConnection Module

    The %XmlRpcConnection module provides an XML-RPC client connection definition
    for the @ref connectionproviderintro "ConnectionProvider"
    module in %Qore.

    To use this module, use \c "%requires XmlRpcConnection" in your code.

    This module automatically uses the <a href="../../xml/html/index.html">xml</a> binary module.

    All the public symbols in the module are defined in the XmlRpcConnection namespace.

    Currently the module provides the following classes:
    - @ref XmlRpcConnection::XmlRpcConnection "XmlRpcConnection"

    @section xmlrpcconnection_relnotes XmlRpcConnection Module Release History

    @subsection xmlrpcconnection_v1_1 XmlRpcConnection v1.1
    - the @ref XmlRpcConnection::XmlRpcConnection::getConstructorInfo() "XmlRpcConnection::getConstructorInfo()"
      method was added to allow connections to be created dynamically, potentially in another process from a network
      call (<a href="https://github.com/qorelanguage/qore/issues/2628">issue 2628</a>)

    @subsection xmlrpcconnection_v1_0 XmlRpcConnection v1.0
    - the initial version of the XmlRpcConnection module
*/

#! the XmlRpcConnection namespace contains all the definitions in the XmlRpcConnection module
public namespace XmlRpcConnection {
    #! class for XML-RPC connections; returns @ref Qore::Xml::XmlRpcClient objects
    /** supports the following options:
        - \c "http_version": HTTP version to use (\c "1.0" or \c "1.1", defaults to \c "1.1")
        - \c "max_redirects": maximum redirects to support
        - \c "proxy": proxy URL to use
        - \c "timeout": transfer timeout to use in milliseconds
        - \c "connect_timeout": connection timeout to use in milliseconds

        @see @ref Qore::Xml::XmlRpcClient::constructor() "XmlRpcClient::constructor()" for more information on the above options
    */
    public class XmlRpcConnection inherits ConnectionProvider::HttpBasedConnection {
        public {
            hash real_opts;
        }

        #! creates the XmlRpcConnection object
        /** @param name the name of the connection
            @param desc connection description
            @param url connection URL (potentially with password info)
            @param monitor monitoring flag
            @param opts connection options
            @param urlh broken down URL hash (as returned by @ref Qore::parse_url())
        */
        constructor(string name, string desc, string url, bool monitor, *hash opts, hash urlh) : HttpBasedConnection(name, desc, url, monitor, opts, urlh) {
            real_opts = ("url": real_url) + opts;
        }

        #! returns a @ref Qore::Xml::XmlRpcClient object
        /** @param connect if @ref Qore::True "True", then the connection is returned already connected
            @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

            @return a @ref Qore::Xml::XmlRpcClient object
        */
        private Qore::Xml::XmlRpcClient getImpl(bool connect = True, *hash rtopts) {
            return new Qore::Xml::XmlRpcClient(real_opts, !connect);
        }

        #! returns a hash that can be used to contruct the object dynamically
        /** @since %XmlRpcConnection 1.1
        */
        private hash<ConnectionConstructorInfo> getConstructorInfoImpl() {
            return new hash<ConnectionConstructorInfo>((
                "module": "xml",
                "class_name": "Qore::Xml::XmlRpcClient",
                "args": real_opts,
                "pre_processing": "args[1] = !connect;",
            ));
        }

        #! gets options
        /** @return returns a hash with the following supported options:
            - \c "http_version": HTTP version to use (\c "1.0" or \c "1.1", defaults to \c "1.1")
            - \c "max_redirects": maximum redirects to support
            - \c "proxy": proxy URL to use
            - \c "timeout": transfer timeout to use in milliseconds
            - \c "connect_timeout": connection timeout to use in milliseconds

            @see @ref Qore::Xml::XmlRpcClient::constructor() "XmlRpcClient::constructor()" for more information on the above options
        */
        hash getOptions() {
            return HttpConnection::Options;
        }

        #! returns default options
        *hash getDefaultOptions() {
            return HttpConnection::DefaultOptions;
        }

        #! returns \c "xmlrpc"
        string getType() {
            return "xmlrpc";
        }

        #! static constructor
        static XmlRpcConnection make(string name, string desc, string url, bool monitor, *hash opts, hash urlh) {
            return new XmlRpcConnection(name, desc, url, monitor, opts, urlh);
        }
    }
}
