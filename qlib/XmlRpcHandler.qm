# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file XmlRpcHandler.qm @brief XML-RPC handler class definition for the HttpServer module

/*  XmlRpcHandler.qm Copyright (C) 2012 - 2022 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# requires the binary xml module
%requires xml >= 1.1

# need mime definitions
%requires Mime >= 1.0

# need the Util module
%requires Util

# need HttpServerUtil definitions
%requires HttpServerUtil >= 0.3.11

# do not use $ for vars
%new-style

module XmlRpcHandler {
    version = "1.1";
    desc = "XmlRpcHandler module for use with the HttpServer module";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/*  Version History
    * 2012-05-31 v1.0: David Nichols <david@qore.org>: updated to a user module
    * 2013-09-24 v1.1: David Nichols <david@qore.org>: added optional log closure to constructor
*/

/** @mainpage XmlRpcHandler Module

    @section xmlrpchandlerintro Introduction to the XmlRpcHandler Module

    This module implements server-side support for the <a href="http://en.wikipedia.org/wiki/XML-RPC">XML-RPC protocol</a> for serialization/deserialization of message data.

    This module provides the @ref XmlRpcHandler::XmlRpcHandler "XmlRpcHandler" class which can be used to provide an RPC handler for the HttpServer class provided by the HttpServer module.

    @section example Example Usage
    @code
%requires HttpServer
%requires XmlRpcHandler
%requires Mime

const ApiMethods = (
     ("name": "^sys\\.shutdown\$",
      "text": "sys.shutdown",
      "function": sub () { background http.stop();  return "OK"; },
      "help": "shuts down this server",
      "logopt": 0,
      ),
);

# a logging closure
code log = sub (string fmt) {printf("%y: %s\n", now_us(), vsprintf(fmt, argv));};

# our bind address
const Bind = 8888;

XmlRpcHandler xmlRpcHandler(new AbstractAuthenticator(), ApiMethods);
our HttpServer http(log, log);
http.addListener(Bind);
http.setHandler("xmlrpc", "", MimeTypeXmlRpc, xmlRpcHandler);
http.setDefaultHandler("xmlrpc", xmlRpcHandler);
log("now listening on %s\n", Bind);
http.waitStop();
    @endcode
*/

#! the %XmlRpcHandler namespace holds all public definitions in the %XmlRpcHandler module
public namespace XmlRpcHandler {
    #! XML-RPC Handler implementation; to be registered as a request handler in the HttpServer class
    /**
     */
    public class XmlRpcHandler inherits public AbstractHttpRequestHandler {
        #! version of the implementation
        const Version = "1.0";

        #! internal methods (for introspection)
        const InternalMethods = (
            ("function": "help",
             "help": "shows a list of XML-RPC methods registered with this handler",
             "text": "help",
             "logopt": 2,
            ),
            ("function": "listMethods",
             "help": "lists XML-RPC method names registered with this handler",
             "text": "system.listMethods",
             "logopt": 2,
            ),
            );

        #! error code for invalid XML-RPC
        const XMLRPC_INVALID_XML = 2001;

        #! @cond nodoc
        private {
            list methods = ();
            hash mi = hash();
            int loglevel;

            # if True then verbose exception info will be logged
            bool debug;

            # prefix to add to derived methods with GET requests if no "." characters are in the path
            *string get_prefix;

            # a closure/call reference to get the log message and/or process arguments in incoming requests
            *code getLogMessage;

            # a closure/call reference for logging (when set this is used instead of the HTTP server's logfunc for logging)
            *code logc;
        }
        #! @endcond

        #! creates the handler with the given method list
        /** @param auth an authentication object (use new AbstractAuthenticator() for no authentication)
            @param methods a list of hashes with the following keys:
            - \c name: a regular expression to use for matching the method name
            - \c function: a string (giving a function name to call), a call reference, or a closure to call with the deserialized arguments to the method; the return value will be serialized to XML-RPC and sent back to the caller
            - \c text: the human-readable name of the method
            - \c help: help text for the method
            - \c logopt: (optional - by convention) log options which can be used by a custom logger (see the getLogMessage parameter)
            @param n_getLogMessage an optional closure or call reference to be called when an incoming request is received; if this is set then it will
be called with the following arguments: a context hash (see HttpServer::AbstractHttpRequestHandler::handleRequest() for a description of the context h
ash), the method definition as passed in the methods argument to this constructor, and a reference to the arguments in this call
            @param dbg this parameter is set to @ref Qore::True "True", then additional information will be logged when errors occur
            @param n_get_prefix prefix to add to derived methods with GET requests if no "." characters are in the path
            @param log an optional closure or call reference to be called when logging

            @throw XML-RPC-CONSTRUCTOR-ERROR missing \c "name", \c "function", or \"text" key in method hash, \c "function" key not assigned to a callable value
         */
        constructor(HttpServer::AbstractAuthenticator auth, list methods, *code n_getLogMessage, bool dbg = False, *string n_get_prefix, *code log) : HttpServer::AbstractHttpRequestHandler(auth) {
            getLogMessage = n_getLogMessage;
            debug = dbg;
            get_prefix = n_get_prefix;
            logc = log;

            # add internal methods
            foreach hash im in (XmlRpcHandler::InternalMethods)
                addMethodInternal(im + ( "internal" : True ));

            foreach hash m in (methods) {
                if (!exists m.name)
                    throw "XML-RPC-CONSTRUCTOR-ERROR", sprintf("expecting 'name' key in method hash (%n)", m);
                if (m.function.typeCode() != NT_CLOSURE && m.function.typeCode() != NT_CALLREF)
                    throw "XML-RPC-CONSTRUCTOR-ERROR", sprintf("expecting 'function' key assigned to code in method hash: %y", m);
                if (!exists m.text)
                    throw "XML-RPC-CONSTRUCTOR-ERROR", sprintf("expecting 'text' key in method hash (%n)", m);
                delete m.internal;
                addMethodInternal(m);
            }
        }

        #! adds a method to the handler dynamically
        /** @param name a regular expression to use for matching the method name
            @param func a string (giving a function name to call), a call reference, or a closure to call with the deserialized arguments to the method; the return value will be serialized to XML-RPC and sent back to the caller
            @param text the human-readable name of the method
            @param help help text for the method
            @param logopt log options which can be used by a custom logger (see the getLogMessage parameter)
            @param cmark any value that will be added in the method hash under the \c "cmark" key
          */
        addMethod(string name, code func, string text, string help, int logopt, auto cmark) {
            addMethodInternal(("name": name,
                               "function": func,
                               "text": text,
                               "help": help,
                               "logopt": logopt,
                               "cmark": cmark,
                              ));
        }

        #! turns on or off debugging; when debugging is enabled more verbose error messages are reported
        setDebug(bool dbg = True) {
            debug = dbg;
        }

        #! returns the current status of the debug flag
        bool getDebug() {
            return debug;
        }

        #! @cond nodoc
        # don't reimplement this method; fix/enhance it in the module
        final private addMethodInternal(hash h) {
            # check for duplicate in method index
            auto i = mi.(h.text);
            if (!exists i)
                i = elements methods;

            if (!exists h.name)
                h.name = sprintf("^%s\$", h.text);
            methods[i] = h;
        }

        private hash help() {
            hash h;
            foreach hash m in (methods) {
                h.(m.text).description = m.help;
                if (exists m.params)
                    h.(m.text).params  = m.params;
            }
            return h;
        }

        private list listMethods() {
            list l;
            foreach hash m in (methods)
                l += m.text;
            return l;
        }

        private log(hash cx, string str) {
            string msg = "XML-RPC ";
            if (exists cx.user)
                msg += sprintf("user %s ", cx.user);
            msg += sprintf("from %s: ", cx."peer-info".address_desc);
            msg += vsprintf(str, argv);

            call_function_args(logc ? logc : cx.logfunc, msg);
        }

        # don't reimplement this method; fix/enhance it in the module
        final private hash<auto> callMethod(hash cx, auto params) {
            string method = cx.method;
            # find method function
            hash<auto> found;
            foreach hash<auto> m in (methods) {
                if (regex(method, m.name)) {
                    found = m;
                    break;
                }
            }

            if (!exists found) {
                throw "XML-RPC-SERVER-UNKNOWN-METHOD", sprintf("unknown method %y", method);
            }

            # add context marker, if any
            cx.cmark = found.cmark;
            cx.function = found.function;

            *string msg = exists getLogMessage ? call_function(getLogMessage, cx, found, \params) : NOTHING;
            if (exists msg) {
                log(cx, msg);
            }

            #printf("DEBUG: about to call function %y (method=%s params=%y)\n", found, method, params);

            auto rv;
            try {
                rv = found.internal
                    ? call_object_method_args(self, found.function, params)
                    : call_function_args(found.function, params);
            } catch (hash<ExceptionInfo> ex) {
                # issue #2573: provide a more user-friendly error when the argument cannot be matched to the
                # closure/call ref
                if (ex.err == "RUNTIME-TYPE-ERROR"
                    && (ex.callstack[1].file =~ /XmlRpcHandler.qm$/
                        && (ex.callstack[1].function == "call_function_args"
                            || ex.callstack[1].function == "call_object_method_args"))) {
                    throw "RPC-ARG-ERROR", sprintf("a call to XML-RPC method %y is missing one or more required "
                        "arguments; internal call error: %s: %s", method, ex.err, ex.desc);
                }
                rethrow;
            }

            hash<auto> h.body = make_xmlrpc_response(rv, 0, cx."response-encoding");
            return h;
        }

        # method called by HttpServer to handle an XML-RPC request
        # don't reimplement this method; fix/enhance it in the module
        final hash handleRequest(hash cx, hash hdr, *data body) {
            #printf("xmlrpc handler context=%y hdr=%y body=%y\n", cx, hdr, body);
            if (!exists cx."response-encoding")
                cx."response-encoding" = get_default_encoding();

            hash xmlrpc;

            if (hdr.method == "GET") {
                string path = substr(hdr.path, index(hdr.path, "/") + 1);

                if (path.empty())
                    return (
                        "code": 501,
                        "body": "invalid HTTP GET: no path/XML-RPC method name given",
                    );

                xmlrpc += parse_uri_query(path);
                # rename "method" to "methodName"
                xmlrpc.methodName = remove xmlrpc.method;

                if (exists get_prefix && index(xmlrpc.methodName, ".") == -1)
                    xmlrpc.methodName = get_prefix + xmlrpc.methodName;
            } else {
                if (hdr.method != "POST")
                    return (
                        "code": 501,
                        "body": sprintf("don't know how to handle method %n", hdr.method),
                    );

                if (hdr."content-type" != MimeTypeXml && hdr."content-type" != MimeTypeXmlApp)
                    return (
                        "code": 501,
                        "body": sprintf("don't know how to handle content-type %n", hdr."content-type"),
                    );

                try {
                    xmlrpc = parse_xmlrpc_call(body);
                }
                catch (hash<ExceptionInfo> ex) {
                    log(cx, get_exception_string(ex));
                    log(cx, "error parsing XML-RPC string: %s", body);
                    return (
                        "code": 200,
                        "errlog": sprintf("%s: %s", ex.err, ex.desc),
                        "hdr": ( "Content-Type" : MimeTypeXml ),
                        "body": make_xmlrpc_fault(XMLRPC_INVALID_XML, ex.err, 0, cx."response-encoding"),
                    );
                }
            }
            try {
                cx.method = xmlrpc.methodName;
                auto rh = callMethod(cx, xmlrpc.params);
                #printf("method=%s args=%n\nans=%N\n", xmlrpc.methodName, xmlrpc.params, rh);flush();
                return ( "code" : 200, "hdr" : ( "Content-Type" : MimeTypeXml ) ) + rh;
            }
            catch (hash<ExceptionInfo> ex) {
                #log(cx, getExceptionString(ex));
                #log(LL_CRITICAL, "context=%N\nxmlrpc=%N\n", cx, xmlrpc);
                #log(LL_CRITICAL, getExceptionString(ex));

                # show complete exception trace if system debug option is enabled
                string str = !debug
                    ? sprintf("%s: %s", ex.err, ex.desc)
                    : get_exception_string(ex);

                return (
                    "code": 200,
                    "errlog": str,
                    "hdr": ("Content-Type": MimeTypeXml),
                    "body": make_xmlrpc_fault(int(ex.arg), str, 0, cx."response-encoding"),
                );
            }
        }
        #! @endcond
    }
}
