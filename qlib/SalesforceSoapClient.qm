# -*- mode: qore; indent-tabs-mode: nil -*-
# @file SalesforceSoapClient.qm Salesforce SOAP Client Definition Module

/*  SalesforceSoapClient.qm Copyright (C) 2015 - 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 0.8.12
%requires(reexport) xml
%requires(reexport) Mime
%requires(reexport) SoapClient
%requires(reexport) WSDL

%new-style
%require-types
%strict-args
%enable-all-warnings

module SalesforceSoapClient {
    version = "1.0";
    desc = "Qorus Salesforce SOAP Client Definition module";
    author = "Qore Technologies, s.r.o.";
    url = "http://qoretechnologies.com";
}

/** @mainpage SalesforceSoapClient Module

    @tableofcontents

    @section salesforcesoapclientintro Introduction to the SalesforceSoapClient Module

    The SalesforceSoapClient module provides an API for communicating with Salesforce.com using SOAP.

    This module requires the following modules which are also reexported to the program context:
    - <a href="../../xml/html/index.html">xml binary module</a>
    - <a href="../../SoapClient/html/index.html">SoapClient user module</a>
    - <a href="../../WSDL/html/index.html">WSDL user module</a>
    - @ref mimeintro "Mime user module"

    This module provides the following class:
    - @ref SalesforceSoapClient::SalesforceSoapClient "SalesforceSoapClient"

    @section salessoapclient_example SalesforceSoapClient Example

    Here is an example of how to use this module:
    @code{.py}
hash opts = (
    "wsdl": wsdl,
    "username": "myuser@example.com",
    "password": "pass",
    "token": "token",
    "log": sub (string fmt) {
        if (m_options.verbose)
            printf("INFO: %s\n", vsprintf(fmt, argv));
    },
    "dbglog": sub (string fmt) {
        if (m_options.verbose > 1)
            printf("DEBUG: %s\n", vsprintf(fmt, argv));
    },
    );

SalesforceSoapClient sc(opts);
string ss = sprintf("select id, name, description, accountnumber from account where accountnumber = '%s'", AcctNo1);
hash rh = sc.query(("queryString": ss));
printf("%N\n", rh);
    @endcode

    @section salesforcesoapclientrelnotes SalesforceSoapClient Release Notes

    @subsection salesfocesoapclient_1_0 SalesforceSoapClient v1.0
    - initial release of the module
*/

#! main %SalesforceSoapClient module namespace
public namespace SalesforceSoapClient {
    #! class provising SOAP API access to Salesforce.com
    /** This class inherits @ref SoapClient::SoapClient "SoapClient" to perform SOAP communication with
        Salesforce.com.

        @note By default this class does not log out of Salesforce.com in the destructor in order to keep the API session alive.
        To force a logout of the session in the destructor, use the \c force_logout option in the constructor().
     */
    public class SalesforceSoapClient inherits SoapClient::SoapClient {
        private {
            # mutex for atomic operations
            Mutex lck();
            # logged in flag
            bool logged_in = False;

            # Salesforce.com username
            string username;
            # Salesforce.com user password
            string password;
            # Salesforce.com user token
            string token;

            # Salesforce.com server URL
            string serverurl;
            # Salesforce.com session ID
            string sessionid;

            # default SoapAction value
            string soapaction = "default";

            # perform a logout when destroying the object
            /** logouts should be performed manually to ensure that the user's session remains valid
             */
            bool force_logout = False;
        }

        public {
            #! authorization key required for logging in to Salesforce.com
            const AuthorizationHash = (
                "username": True,
                "password": True,
                "token": True,
                );

            #! list of authorization keys
            const AuthorizationOpts = AuthorizationHash.keys();

            #! required options
            const RequiredOpts = AuthorizationOpts + (
                "wsdl",
                );
        }

        #! creates the object with the given options
        /** @param opts options for the SOAP connection; see @ref SoapClient::SoapClient::constructor() "SoapClient::constructor()" for option info for the embedded SoapClient, plus the following options:
            - \c username: (required) Salesforce.com username
            - \c password: (required) Salesforce.com password
            - \c token: (required) Salesforce.com user API token
            - \c force_logout (optional) forces a logout when the SalesforceSoapClient object is destroyed; this should normally be @ref Qore::False "False" to allow for the session to remain valid
         */
        constructor(hash opts) : SoapClient(opts) {
            processOpts(opts);
        }

        #! destroys the object
        /** @note if the \c force_logout option was given in the constructor(), then a logout from the Salesforce.com session is also performed
         */
        destructor() {
            if (logged_in && force_logout)
                logoutIntern();
        }

        #! processes options given in the constructor()
        private processOpts(hash opts) {
            foreach string opt in (AuthorizationOpts) {
                if (!opts{opt})
                    throw "SALESFORCE-SOAP-ERROR", sprintf("missing required option %y", opt);
                # save options
                self{opt} = opts{opt};
            }

            if (exists opts.force_logout && parse_boolean(opts.force_logout))
                force_logout = True;
        }

        #! performs a manual login to Salesforce.com
        login() {
            lck.lock();
            on_exit lck.unlock();

            if (!logged_in)
                loginIntern();
        }

        #! performs a manual logout to Salesforce.com
        logout() {
            lck.lock();
            on_exit lck.unlock();

            if (logged_in)
                logoutIntern();
        }

        #! disconnects from Salesforce.com; if the \c force_logout option was given in the constructor(), then a logout is performed before disconnecting
        disconnect() {
            lck.lock();
            on_exit lck.unlock();

            if (logged_in && force_logout)
                logoutIntern();

            SoapClient::disconnect();
        }

        #! makes a server call with the given operation, arguments, options, and optional info hash reference and returns the result
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param args the arguments to the SOAP operation
            @param opts an optional hash of options for the call as follows:
            - \c soap_header: a hash giving SOAP header information, if required by the message
            - \c http_header: a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            - \c xml_opts: an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            - \c soapaction: an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
         */
        any callOperation(string operation, any args, *hash opts, *reference info) {
            lck.lock();
            on_exit lck.unlock();

            if (!logged_in)
                loginIntern();

            return callIntern(operation, args, opts, \info);
        }

        #! makes the internal call and returns the deserialized response
        /** @param operation the SOAP operation to use to serialize the request; if the operation is not known to the underlying @ref WSDL::WebService "WebService" class, an exception will be thrown
            @param args the arguments to the SOAP operation
            @param opts an optional hash of options for the call as follows:
            - \c soap_header: a hash giving SOAP header information, if required by the message
            - \c http_header: a hash giving HTTP header information to include in the message (does not override automatically-generated SOAP message headers)
            - \c xml_opts: an integer XML generation option code; see @ref xml_generation_constants for possible values; combine multiple codes with binary or (\c |)
            - \c soapaction: an optional string that will override the SOAPAction for the request; en empty string here will prevent the SOAPAction from being sent
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)

            @return a hash with the following keys:
            - \c hdr: a hash of message headers
            - \c body: the serialized message body

            @throw WSDL-OPERATION-ERROR the operation is not defined in the WSDL
            @throw HTTP-CLIENT-RECEIVE-ERROR this exception is thrown when the SOAP server returns an HTTP error code; if a SOAP fault is returned, then it is deserialized and returned in the \a arg key of the exception hash

            @note this method can throw any exception that @ref Qore::HTTPClient::send() "HTTPClient::send()" can throw as well as any XML parsing errors thrown by @ref Qore::XML::parse_xml() "parse_xml()"
         */
        private any callIntern(string operation, any args, *hash opts, *reference info) {
            # add session ID to SOAP call header
            if (sessionid)
                opts.soap_header.sessionId = sessionid;
            opts.soapaction = soapaction;

            return SoapClient::callOperation(operation, args, opts, \info);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param args the operation parameter(s)
            @param header optional soap headers (if required by the operation)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(string operation, any args, *hash header) {
            return callOperation(operation, args, ("soap_header": header));
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result
        /** @param operation the operation name for the SOAP call
            @param args the arguments to the SOAP operation
            @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(string operation, any args, reference info) {
            return callOperation(operation, args, NOTHING, \info);
        }

        #! makes a server call with the given operation and arguments and returns the deserialized result with an output argument giving technical information about the call
        /** @param info an optional reference to return a hash of technical information about the SOAP call (raw message info and headers); the following keys are present in this hash:
            - \c "headers": a hash of HTTP request headers
            - \c "request-uri": the request URI string (ex: \c "POST /services/Soap/c/29.0 HTTP/1.1")
            - \c "response-uri": the response URI string (ex: \c "HTTP/1.1 200 OK")
            - \c "charset": the character encoding string (ex: \c "UTF-8")
            - \c "body-content-type": the \c Content-Type of the response without any \c charset declaration
            - \c "accept-charset": the valus of any \c Accept-Charset header in the response
            - \c "response-headers": a hash of HTTP response headers
            - \c "response-body": the raw XML response body (in case content encoding is used, this is the decoded value)
            - \c "request-body": the raw XML request body
            - \c "request-soap-headers": an optional hash of SOAP headers used in the request (if applicable)
            @param operation the operation name for the SOAP call
            @param args the arguments to the SOAP operation
            @param header optional soap headers (if required by the operation)

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any call(reference info, string operation, any args, *hash header) {
            return callOperation(operation, args, ("soap_header": header), \info);
        }

        nothing setWarningQueue(int warning_ms, int warning_bs, Queue queue, any arg, timeout min_ms = 1s) {
            lck.lock();
            on_exit lck.unlock();

            SoapClient::setWarningQueue(warning_ms, warning_bs, queue, arg, min_ms);
        }

        nothing clearWarningQueue() {
            lck.lock();
            on_exit lck.unlock();

            SoapClient::clearWarningQueue();
        }

        #! uses call() to transparently serialize the argument and make a call to the given operation and return the deserialized results
        /** @param op the operation name, which is the method name passed to methodGate()
            @param arg a list or arguments or a single argument (or NOTHING) for the operation

            @return the deserialized result of the SOAP call to the SOAP server
        */
        any methodGate(string op, any arg) {
            return call(op, arg);
        }

        private logoutIntern() {
            callIntern("logout");
            SoapClient::log("logged out of %y", url);
            logged_in = False;
            delete serverurl;
            delete sessionid;
        }

        # must be called with the lock held
        private loginIntern() {
            hash lh = self.("username", "password");
            lh.password += token;

            lh = callIntern("login", lh).result;
            serverurl = lh.serverUrl;
            sessionid = lh.sessionId;

            log("logged in to %y: serverurl: %y sessionid: %y", url, serverurl, sessionid);
            logged_in = True;

            # disconnect and set new URL
            SoapClient::disconnect();
            url = serverurl;
            setURL(serverurl);
        }
    }
}
