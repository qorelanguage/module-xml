# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file SoapHandler.qm SOAP handler module providing the SoapHandler class to be registered as a handler with the Qore HttpServer module

/*  SoapHandler.qm Copyright 2012 David Nichols

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/


# make sure we have the required qore version
%requires qore >= 0.8.4

# requires XML functionality
%requires xml

# requires the WSDL module
%requires WSDL

# need mime definitions
%requires Mime >= 1.1

# need definitions from the HttpServer
%requires HttpServer >= 0.3.3

module SoapHandler {
    version = "0.2.4";
    desc = "SoapHandler module";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
}

/*  Version History
    * 2012-05-31 v0.2.4: David Nichols <david@qore.org>: updated to a user module
    *            v0.2.3: return correct soap fault structure according to request
    *            v0.2.2: soap 1.2 improvements
    *            v0.2.1: matched to new WSDL and HttpServer implementation
    *            v0.2.0: better WSDL support
    *            v0.1.0: initial WSDL-based SOAP support (still incomplete)
*/

/** @mainpage SoapHandler Module
    
    @section intro Introduction

    This module implements server-side support for the <a href="http://en.wikipedia.org/wiki/SOAP">SOAP protocol</a> for serialization/deserialization of message data.

    This module provides the @ref SoapHandler::SoapHandler "SoapHandler" class which can be used to provide an RPC handler for the HttpServer class provided by the HttpServer module.
*/

#! main SoapHandler namespace
public namespace SoapHandler {
    #! SoapHandler implementation; to be registered as a request handler in the HttpServer class
    public class SoapHandler inherits public AbstractHttpRequestHandler {
        #! version of the SoapHandler implementation
        const Version = "0.2.4";

        #! @cond nodoc
        private {
            hash $.methods;
            $.mi;

            # hash of WebService objects (values) per path (keys)
            hash $.ws;

            # hash: path -> top-level-method-name -> method
            hash $.pathmethods;

            int $.loglevel;

            # if True then verbose exception info will be logged
            bool $.debug;

            # a closure/call reference to get the log message and/or process arguments in incoming requests
            *code $.getLogMessage;

            # for atomicity when adding / removing methods
            RWLock $.rwl();

            # hash of methods by path
            hash $.th;
        }
        #! @endcond

        #! creates the handler with the given method list
        /** @param auth an authentication object (use new AbstractAuthenticator() for no authentication)
            @param getLogMessage an optional closure or call reference to be called when an incoming request is received; if this is set then it will be called with the following arguments: a context hash (see HttpServer::AbstractHttpRequestHandler::handleRequest() for a description of the context hash), the method definition as passed in the methods argument to this constructor, and a reference to the arguments in this call
            @param dbg this parameter is set to @ref Qore::True "True", then additional information will be logged when errors occur
         */
        constructor(AbstractAuthenticator $auth, *code $getLogMessage, bool $dbg = False) : AbstractHttpRequestHandler($auth) {
            $.getLogMessage = $getLogMessage;
            $.debug = $dbg;
        }

        #! adds a method to the handler dynamically
        /** @param ws the WebService object for the method
            @param op the WSOperation object for the web service operation the method corresponds to
            @param func a call reference, a closure, or a string function name to call with the deserialized arguments to the method; the return value will be serialized to SOAP according to the WSDL and sent back to the caller
            @param help optional help text for the method
            @param logopt log options which can be used by a custom logger (see the getLogMessage parameter in the constructor)
            @param cmark an optional "context marker" for the method
            @param path an optional path for the method
         */
        addMethod(WebService $ws, WSOperation $op, any $func, *string $help, *int $logopt, any $cmark, *string $path) {
            if (!$func)
                throw "SOAP-SERVER-ADDMETHOD-PARAMETER-ERROR", sprintf("second argument is not a function name or callable value type (got: %y)", $func);

            $.addMethodInternal($ws, 
                                ( "operation" : $op,
                                  "name"      : $op.name,
                                  "function"  : $func,
                                  "help"      : $help,
                                  "logopt"    : $logopt,
                                  "cmark"     : $cmark,
                                  "path"      : $path,
                                ));
            #printf("methods=%N\n", $.methods);
        }

        #! call to remove all service mappings for services with the given path
        removeServicesWithPath(string $path) {
            $.rwl.writeLock();
            on_exit $.rwl.writeUnlock();

            # remove webservice mappings
            delete $.ws.$path;

            # remove path/method mappings
            delete $.pathmethods.$path;

            # remove method link mappings
            map delete $.methods.$1, $.th.$path.keyIterator();
        }

        #! @cond nodoc
        # don't reimplement this method; fix/enhance it in the module
        final private addMethodInternal(WebService $ws, hash $method) {
            my string $rn = $method.operation.getTopLevelRequestName();

            $.rwl.writeLock();
            on_exit $.rwl.writeUnlock();

            # map top-level element to method
            if ($method.path) {
                my string $path = $method.path;

                # add link to WebService object
                if (!$.ws.$path)
                    $.ws.$path = $ws;

                if (!$.pathmethods.$path.$rn)
                    $.pathmethods.$path.$rn = $method;

                # add method link if it doesn't already exist
                if (!$.methods.$rn) {
                    $.methods.$rn = $method;
                    $.th.$path.$rn = True;
                }
            }
            else {
                # add method link if it doesn't already exist
                if (!$.methods.$rn)
                    $.methods.$rn = $method;
            }
                
            #printf("DEBUG: addMethodInternal() %N %N\n", $method.name, $method.path);
        }

        private *hash help(hash $cx) {
            my hash $h;

            $.rwl.readLock();
            on_exit $.rwl.readUnlock();

            foreach my string $cmd in ($.methods.keyIterator()) {
                $h.$cmd.description = $.methods.$cmd.help;
                if ($.methods.$cmd.params)
                    $h.$cmd.params = $.methods.$cmd.params;
            }
            foreach my string $path in ($.pathmethods.keyIterator()) {
                foreach my string $cmd in ($.pathmethods.$path.keyIterator()) {
                    $h.$cmd.description = $.methods.$cmd.help;
                    if ($.pathmethods.$path.$cmd.params)
                        $h.$path.$cmd.params = $.pathmethods.$path.$cmd.params;
                }
            }

            return $h;
        }

        # don't reimplement this method; fix/enhance it in the module
        final private log(hash $cx, string $str) {
            my $msg = "SOAP ";
            if (exists $cx.user)
                $msg += sprintf("user %s ", $cx.user);
            $msg += sprintf("from %s: ", $cx."peer-info".address_desc);
            $msg += vsprintf($str, $argv);

            call_function_args($cx.logfunc, $msg);
        }

        # don't reimplement this method; fix/enhance it in the module
        private static string makeSoapFaultResponse(bool $soap12, string $err, string $desc) {
            my hash $o;
            if ($soap12) {
                $o = ENVELOPE_12_NS;
                $o."soapenv:Envelope"."soapenv:Body" =
                    ("soapenv:Fault":
                     ("soapenv:Code": ("soapenv:Value": $err),
                      "soapenv:Reason": ("soapenv:Text": $desc)));
            }
            else {
                $o = ENVELOPE_11_NS;
                $o."soapenv:Envelope"."soapenv:Body" =
                    ("soapenv:Fault":
                      ("faultcode": $err,
                       "faultstring": $desc,
                       "desc": ""));
            }

            return makeXMLString($o);
        }

        # don't reimplement this method; fix/enhance it in the module
        final private hash callOperation(hash $cx, any $args) {
            my $element = $cx.element;

            my *hash $method;
            {
                $.rwl.readLock();
                on_exit $.rwl.readUnlock();

                if (exists $cx.url.path) {
                    my $path = $cx.url.path;
                    # prepend "/" if it's not already there
                    if ($path !~ /^\//)
                        $path =~ s/(.*)/\/$1/;

                    $method = $.pathmethods.$path.$element;
                    #printf("DEBUG: path=%n method exists=%n (%n)\n", $path, exists $method, keys $.pathmethod);
                }

                if (!exists $method)
                    $method = $.methods.$element;

                #printf("DEBUG: found element %N method %N\n", $element, $method);
                if (!exists $method) {
                    if (!exists $element)
                        throw "SOAP-SERVER-UNKNOWN-OPERATION", sprintf("cannot find operation element in SOAP call; call context=%N", $cx);	    
                    throw "SOAP-SERVER-UNKNOWN-OPERATION", sprintf("cannot map top-level element %n to a SOAP operation: %s", $element, elements $.methods ? sprintf("currently recognized top-level elements: %n", keys $.methods) : "no SOAP services are currently registered");
                }
            }

            # NOTE: internal methods have no operation definition and can take no parameters
            my hash $h;
            if ($method.internal) {
                $h.body = callObjectMethod($self, $method.function);
                return $h;
            }

            my bool $soap12 = $method.operation.isSoap12();

            try {
                $args = $method.operation.deserializeRequest($args);
            }
            catch ($ex) {
                return ( "errlog" : sprintf("%s:%d: %s: %s", $ex.file, $ex.line, $ex.err, $ex.desc),
                         "body"   : SoapHandler::makeSoapFaultResponse($soap12, $ex.err, $ex.desc),
                         "hdr"    : ( "Content-Type" : $soap12 ? MimeTypeSoapXml : MimeTypeXml ) );
            }

            # add context marker, if any
            $cx.cmark = $method.cmark;
            $cx.function = $method.function;
            $cx.operation = $method.operation;

            if (($method.logopt & HttpServer::LP_LEVELMASK) <= $.loglevel && exists $cx.logfunc) {
                my $msg;

                $msg = sprintf("SOAP call from %s: %s", $cx."peer-info".address_desc, $method.name);
                if ($method.logopt & HttpServer::LP_LOGPARAMS) {
                    $msg += sprintf("(");
                    my $i = 0;
                    foreach my $arg in ($args) {
                        if (inlist($i++, $method.maskargs))
                            $msg += "<masked>, ";
                        else if ($arg.typeCode() == NT_HASH && elements $arg) {
                            $msg += "(";
                            foreach my $k in (keys $arg) {
                                if ($k == $method.maskkey)
                                    $msg += sprintf("%s=<masked>, ", $k);
                                else
                                    $msg += sprintf("%s=%n, ", $k, $arg.$k);
                            }
                            splice $msg, -2, 2;
                            $msg += "), ";
                        }
                        else
                            $msg += sprintf("%n, ", $arg);
                    }
                    # remove the last two characters from the string if any were added
                    if ($i)
                        splice $msg, -2, 2;
                    $msg += ")";
                }

                $.log($cx, $msg);
                $h.logreply = True;
            }
            #printf("about to call function '%s' (method=%s params=%N)\n", $method.function, $method.name, $args);flush();
            my $rv;

            if ($args.typeCode() == NT_LIST)
                unshift $args, $cx;
            else if (exists $args)
                $args = ($cx, $args);
            else
                $args = $cx;

            if ($method.internal)
                $rv = callObjectMethodArgs($self, $method.function, $args);
            else
                $rv = call_function_args($method.function, $args);

            # if there is an output message, then serialize the response
            if (exists $method.operation.output)
                $h += $method.operation.serializeResponse($rv);

            #$.log($cx, "body=%N", $h.body);
            
            return $h;
        }

        # method called by HttpServer
        # don't reimplement this method; fix/enhance it in the module
        final hash handleRequest(hash $cx, hash $hdr, *data $body) {
            #log(LL_DEBUG_1, "soap handler context=%n hdr=%n body=%n ws=%n", $cx, $hdr, $body, keys $.ws);
            #printf("soap handler context=%y hdr=%y body=%y keys ws=%y\n", $cx, $hdr, $body, keys $.ws);
            $cx.http_header = $hdr;
            $cx.http_body = $body;

            my $args;
            my $reqsoap12; # set to True if soap 1.2 envelope is used in request

            if ($hdr.method == "GET") {
                my *string $path = $cx.url.path;

                # prepend "/" if it's not already there
                if ($path !~ /^\//)
                    $path = "/" + $path;

                # remove ?wsdl if there
                $path =~ s/\?wsdl$//i;

                #printf("DEBUG: PATH=%N (%n %n)\n", $path, exists $.ws.$path, keys $.ws);
                
                if (!$path)
                    return (
                        "code": 501,
                        "desc": "invalid HTTP GET: no path given in URL",
                    ); 

                $.rwl.readLock();
                on_exit $.rwl.readUnlock();

                if (!exists $.ws.$path)
                    return (
                        "code": 501,
                        "desc": sprintf("invalid HTTP GET: no WebService object for path %n", $path),
                    ); 
                
                return (
                    "code": 200,
                    "body": $.ws.$path.getWSDL(),
                    "hdr": ("Content-Type": "text/xml"),
                    );
            }
            else {
                if ($hdr.method != "POST")
                    return ( "code" : 501,
                             "body" : sprintf("don't know how to handle method %n", $hdr.method) );

                try {
                    my $ct = $hdr."_qore_orig_content_type";
                    # parse multipart messages
                    if ($ct =~ /multipart\//) {
                        my $x = ($ct =~ x/multipart\/([^;]+)/)[0];
                        $hdr."_qore_multipart" = $x;
                        $x = ($ct =~ x/start=([^;]+)/)[0];
                        if (exists $x)
                            $hdr."_qore_multipart_start" = $x;
                        $x = ($ct =~ x/boundary=([^;]+)/)[0];
                        if (exists $x)
                            $hdr."_qore_multipart_boundary" = $x;
                        #printf("hdr=%N\n", $hdr);
                    }

                    $args = WSDLLib::parseSOAPMessage($hdr + ("body" : $body));
                    #$args = parseXMLAsData($body);
                    WSDL::XSDBase::removeNS(\$args);
                    WSDL::XSDBase::removeNS(\$args.Envelope);

                    # get SOAP operation name
                    my $element;
                    if (!exists ($element = ($ct =~ x/action=".*\/(.*)"/)[0])) {

                        my $sbody = $args.Envelope.Body;
                        if (!exists $sbody)
                            throw "SOAP-CALL-ERROR", "missing SOAP body in SOAP envelope in SOAP operation call";

                        foreach my $k in (keys $sbody) {
                            if ($k == "multiRef" || $k == "^attributes^")
                                continue;
                            $element = $k =~ x/.*:(.*)/[0];
                            break;
                        }
                    }

                    # set soap version in request
                    my $attr = $args.Envelope."^attributes^";
                    foreach my $k in (keys $attr) {
                        if ($k =~ /:soapenv$/) {
                            if ($attr.$k == SOAP_12_ENV)
                                $reqsoap12 = True;
                            else if ($attr.$k != SOAP_11_ENV)
                                throw "SOAP-CALL-ERROR", sprintf("unsupported SOAP envelope received: %n", $attr.$k);
                            break;
                        }
                    }
		    
                    if (!exists $element)
                        throw "SOAP-CALL-ERROR", "no operation call found in message";
                    
                    $cx.element = $element;
                }
                catch ($ex) {
                    $.log($cx, "exception parsing SOAP msg: %y", $body);
                    #my string $str = sprintf("exception in %s:%d: %s: %s (1: %N)", $ex.file, $ex.line, $ex.err, $ex.desc, $ex.callstack);
                    return (
                        "code": 200,
                        "errlog": sprintf("%s: %s", $ex.err, $ex.desc),
                        "body": SoapHandler::makeSoapFaultResponse($reqsoap12, $ex.err, $ex.desc),
                        "hdr": ("Content-Type" : MimeTypeSoapXml),
                        );
                }
            }
            try {
                #printf("DEBUG: context: %N\nargs: %N\n", $cx, $args);
                return ("code": 200) + $.callOperation($cx, $args);
            }
            catch ($ex) {
                my string $str = sprintf("exception in %s:%d: %s: %s (2: %N)", $ex.file, $ex.line, $ex.err, $ex.desc, $ex.callstack);
                return (
                    "code": 200,
                    "errlog": $str,
                    "body": SoapHandler::makeSoapFaultResponse($reqsoap12, $ex.err, $ex.desc),
                    "hdr": ("Content-Type" : MimeTypeSoapXml)
                    );
            }
        }
        #! @endcond
    }
}
